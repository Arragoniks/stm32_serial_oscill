
BluePill_USB_Oscill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009514  08009514  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009514  08009514  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800951c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e4  2000017c  08009698  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001460  08009698  00021460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c81  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355b  00000000  00000000  00033e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00037388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00038570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b175  00000000  00000000  000395c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c33  00000000  00000000  00054735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009210d  00000000  00000000  0006b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd475  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  000fd4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800947c 	.word	0x0800947c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800947c 	.word	0x0800947c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000150:	b086      	sub	sp, #24
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc30 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f898 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 fa44 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 fa24 	bl	80005ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000164:	f000 f8f0 	bl	8000348 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000168:	f000 f9d2 	bl	8000510 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800016c:	f008 fcbe 	bl	8008aec <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8000170:	f000 f964 	bl	800043c <MX_ADC2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LED_OFF;
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	483e      	ldr	r0, [pc, #248]	; (8000274 <main+0x128>)
 800017c:	f001 fe56 	bl	8001e2c <HAL_GPIO_WritePin>

  // Create buffer for storing adc value
  const uint16_t dmaBufLen = DMA_BUF_LEN;
 8000180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000184:	82fb      	strh	r3, [r7, #22]
  uint32_t dmaBuf[dmaBufLen];
 8000186:	8afb      	ldrh	r3, [r7, #22]
 8000188:	3b01      	subs	r3, #1
 800018a:	613b      	str	r3, [r7, #16]
 800018c:	8afb      	ldrh	r3, [r7, #22]
 800018e:	2200      	movs	r2, #0
 8000190:	4698      	mov	r8, r3
 8000192:	4691      	mov	r9, r2
 8000194:	f04f 0200 	mov.w	r2, #0
 8000198:	f04f 0300 	mov.w	r3, #0
 800019c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80001a0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80001a4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80001a8:	8afb      	ldrh	r3, [r7, #22]
 80001aa:	2200      	movs	r2, #0
 80001ac:	461c      	mov	r4, r3
 80001ae:	4615      	mov	r5, r2
 80001b0:	f04f 0200 	mov.w	r2, #0
 80001b4:	f04f 0300 	mov.w	r3, #0
 80001b8:	016b      	lsls	r3, r5, #5
 80001ba:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80001be:	0162      	lsls	r2, r4, #5
 80001c0:	8afb      	ldrh	r3, [r7, #22]
 80001c2:	009b      	lsls	r3, r3, #2
 80001c4:	3307      	adds	r3, #7
 80001c6:	08db      	lsrs	r3, r3, #3
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	ebad 0d03 	sub.w	sp, sp, r3
 80001ce:	466b      	mov	r3, sp
 80001d0:	3303      	adds	r3, #3
 80001d2:	089b      	lsrs	r3, r3, #2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	60fb      	str	r3, [r7, #12]
  uint32_t* dmaBufPart2 = &dmaBuf[(uint16_t)(dmaBufLen/2)];
 80001d8:	8afb      	ldrh	r3, [r7, #22]
 80001da:	085b      	lsrs	r3, r3, #1
 80001dc:	b29b      	uxth	r3, r3
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	68fa      	ldr	r2, [r7, #12]
 80001e2:	4413      	add	r3, r2
 80001e4:	60bb      	str	r3, [r7, #8]

  // Create a buffer for message for transfering over USB
  // Store 16 bit values from ADC; USB transfers 8 bit values;
  // message buffer length = 2 * length of data buffer
  const uint16_t usbBufLen = dmaBufLen;
 80001e6:	8afb      	ldrh	r3, [r7, #22]
 80001e8:	80fb      	strh	r3, [r7, #6]
//  char msgBuf [msgLen];

  // Calibrate ADC
  LED_OFF;
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f0:	4820      	ldr	r0, [pc, #128]	; (8000274 <main+0x128>)
 80001f2:	f001 fe1b 	bl	8001e2c <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc1);
 80001f6:	4820      	ldr	r0, [pc, #128]	; (8000278 <main+0x12c>)
 80001f8:	f000 ffe4 	bl	80011c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 80001fc:	481f      	ldr	r0, [pc, #124]	; (800027c <main+0x130>)
 80001fe:	f000 ffe1 	bl	80011c4 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 8000202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000206:	f000 fc39 	bl	8000a7c <HAL_Delay>

  LED_BLINK_FAST;
 800020a:	2200      	movs	r2, #0
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000210:	4818      	ldr	r0, [pc, #96]	; (8000274 <main+0x128>)
 8000212:	f001 fe0b 	bl	8001e2c <HAL_GPIO_WritePin>
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f000 fc30 	bl	8000a7c <HAL_Delay>
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	4814      	ldr	r0, [pc, #80]	; (8000274 <main+0x128>)
 8000224:	f001 fe02 	bl	8001e2c <HAL_GPIO_WritePin>

  // Start ADC and Timer
  HAL_TIM_Base_Start(&htim3);
 8000228:	4815      	ldr	r0, [pc, #84]	; (8000280 <main+0x134>)
 800022a:	f004 f8bf 	bl	80043ac <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc2);
 800022e:	4813      	ldr	r0, [pc, #76]	; (800027c <main+0x130>)
 8000230:	f000 fd20 	bl	8000c74 <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, dmaBuf, dmaBufLen);
 8000234:	8afb      	ldrh	r3, [r7, #22]
 8000236:	461a      	mov	r2, r3
 8000238:	68f9      	ldr	r1, [r7, #12]
 800023a:	480f      	ldr	r0, [pc, #60]	; (8000278 <main+0x12c>)
 800023c:	f001 f86e 	bl	800131c <HAL_ADCEx_MultiModeStart_DMA>

//  Byte isSampling = FALSE;

  while (1)
  {
	  if (readyPart1) {
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0x138>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d007      	beq.n	8000258 <main+0x10c>
		  readyPart1 = FALSE;
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0x138>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)dmaBuf, usbBufLen);
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	4619      	mov	r1, r3
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	f008 fd08 	bl	8008c68 <CDC_Transmit_FS>
	  }
	  if (readyPart2) {
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <main+0x13c>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0ef      	beq.n	8000240 <main+0xf4>
		  readyPart2 = FALSE;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <main+0x13c>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)dmaBufPart2, usbBufLen);
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	4619      	mov	r1, r3
 800026a:	68b8      	ldr	r0, [r7, #8]
 800026c:	f008 fcfc 	bl	8008c68 <CDC_Transmit_FS>
	  if (readyPart1) {
 8000270:	e7e6      	b.n	8000240 <main+0xf4>
 8000272:	bf00      	nop
 8000274:	40011000 	.word	0x40011000
 8000278:	20000198 	.word	0x20000198
 800027c:	200001c8 	.word	0x200001c8
 8000280:	2000023c 	.word	0x2000023c
 8000284:	20000284 	.word	0x20000284
 8000288:	20000285 	.word	0x20000285

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b094      	sub	sp, #80	; 0x50
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f009 f8e6 	bl	800946c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002bc:	2301      	movs	r3, #1
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 fa96 	bl	8003814 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ee:	f000 fa0b 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2302      	movs	r3, #2
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000302:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fd02 	bl	8003d18 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800031a:	f000 f9f5 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800031e:	2312      	movs	r3, #18
 8000320:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000326:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800032c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f003 fe75 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800033c:	f000 f9e4 	bl	8000708 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3750      	adds	r7, #80	; 0x50
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	463b      	mov	r3, r7
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800035c:	4b35      	ldr	r3, [pc, #212]	; (8000434 <MX_ADC1_Init+0xec>)
 800035e:	4a36      	ldr	r2, [pc, #216]	; (8000438 <MX_ADC1_Init+0xf0>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000362:	4b34      	ldr	r3, [pc, #208]	; (8000434 <MX_ADC1_Init+0xec>)
 8000364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000368:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800036a:	4b32      	ldr	r3, [pc, #200]	; (8000434 <MX_ADC1_Init+0xec>)
 800036c:	2200      	movs	r2, #0
 800036e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000370:	4b30      	ldr	r3, [pc, #192]	; (8000434 <MX_ADC1_Init+0xec>)
 8000372:	2200      	movs	r2, #0
 8000374:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000376:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <MX_ADC1_Init+0xec>)
 8000378:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800037c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <MX_ADC1_Init+0xec>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000384:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <MX_ADC1_Init+0xec>)
 8000386:	2204      	movs	r2, #4
 8000388:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038a:	482a      	ldr	r0, [pc, #168]	; (8000434 <MX_ADC1_Init+0xec>)
 800038c:	f000 fb9a 	bl	8000ac4 <HAL_ADC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f9b7 	bl	8000708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800039a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800039e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003a0:	f107 030c 	add.w	r3, r7, #12
 80003a4:	4619      	mov	r1, r3
 80003a6:	4823      	ldr	r0, [pc, #140]	; (8000434 <MX_ADC1_Init+0xec>)
 80003a8:	f001 f86e 	bl	8001488 <HAL_ADCEx_MultiModeConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f9a9 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c2:	463b      	mov	r3, r7
 80003c4:	4619      	mov	r1, r3
 80003c6:	481b      	ldr	r0, [pc, #108]	; (8000434 <MX_ADC1_Init+0xec>)
 80003c8:	f000 fd02 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80003d2:	f000 f999 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003da:	2302      	movs	r3, #2
 80003dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	463b      	mov	r3, r7
 80003e0:	4619      	mov	r1, r3
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <MX_ADC1_Init+0xec>)
 80003e4:	f000 fcf4 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80003ee:	f000 f98b 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003f2:	2305      	movs	r3, #5
 80003f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003f6:	2303      	movs	r3, #3
 80003f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	463b      	mov	r3, r7
 80003fc:	4619      	mov	r1, r3
 80003fe:	480d      	ldr	r0, [pc, #52]	; (8000434 <MX_ADC1_Init+0xec>)
 8000400:	f000 fce6 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800040a:	f000 f97d 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800040e:	2306      	movs	r3, #6
 8000410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000412:	2304      	movs	r3, #4
 8000414:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	463b      	mov	r3, r7
 8000418:	4619      	mov	r1, r3
 800041a:	4806      	ldr	r0, [pc, #24]	; (8000434 <MX_ADC1_Init+0xec>)
 800041c:	f000 fcd8 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000426:	f000 f96f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000198 	.word	0x20000198
 8000438:	40012400 	.word	0x40012400

0800043c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800044c:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <MX_ADC2_Init+0xcc>)
 800044e:	4a2f      	ldr	r2, [pc, #188]	; (800050c <MX_ADC2_Init+0xd0>)
 8000450:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000452:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <MX_ADC2_Init+0xcc>)
 8000454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000458:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <MX_ADC2_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000460:	4b29      	ldr	r3, [pc, #164]	; (8000508 <MX_ADC2_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_ADC2_Init+0xcc>)
 8000468:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800046c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <MX_ADC2_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 4;
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <MX_ADC2_Init+0xcc>)
 8000476:	2204      	movs	r2, #4
 8000478:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800047a:	4823      	ldr	r0, [pc, #140]	; (8000508 <MX_ADC2_Init+0xcc>)
 800047c:	f000 fb22 	bl	8000ac4 <HAL_ADC_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000486:	f000 f93f 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800048a:	2303      	movs	r3, #3
 800048c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048e:	2301      	movs	r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	481b      	ldr	r0, [pc, #108]	; (8000508 <MX_ADC2_Init+0xcc>)
 800049c:	f000 fc98 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 f92f 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004aa:	2304      	movs	r3, #4
 80004ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4814      	ldr	r0, [pc, #80]	; (8000508 <MX_ADC2_Init+0xcc>)
 80004b8:	f000 fc8a 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80004c2:	f000 f921 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004c6:	2307      	movs	r3, #7
 80004c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004ca:	2303      	movs	r3, #3
 80004cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <MX_ADC2_Init+0xcc>)
 80004d4:	f000 fc7c 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80004de:	f000 f913 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004e2:	2308      	movs	r3, #8
 80004e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004e6:	2304      	movs	r3, #4
 80004e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_ADC2_Init+0xcc>)
 80004f0:	f000 fc6e 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80004fa:	f000 f905 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200001c8 	.word	0x200001c8
 800050c:	40012800 	.word	0x40012800

08000510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_TIM3_Init+0x94>)
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <MX_TIM3_Init+0x98>)
 8000530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM_PRESC;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <MX_TIM3_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_TIM3_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM_PRD;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_TIM3_Init+0x94>)
 8000540:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_TIM3_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_TIM3_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000552:	4814      	ldr	r0, [pc, #80]	; (80005a4 <MX_TIM3_Init+0x94>)
 8000554:	f003 feda 	bl	800430c <HAL_TIM_Base_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f8d3 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4619      	mov	r1, r3
 800056e:	480d      	ldr	r0, [pc, #52]	; (80005a4 <MX_TIM3_Init+0x94>)
 8000570:	f003 ff66 	bl	8004440 <HAL_TIM_ConfigClockSource>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 f8c5 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800057e:	2320      	movs	r3, #32
 8000580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_TIM3_Init+0x94>)
 800058c:	f004 f914 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000596:	f000 f8b7 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000023c 	.word	0x2000023c
 80005a8:	40000400 	.word	0x40000400

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_DMA_Init+0x38>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <MX_DMA_Init+0x38>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_DMA_Init+0x38>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200b      	movs	r0, #11
 80005d0:	f001 f883 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d4:	200b      	movs	r0, #11
 80005d6:	f001 f89c 	bl	8001712 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_GPIO_Init+0xa8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a23      	ldr	r2, [pc, #140]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_GPIO_Init+0xa8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <MX_GPIO_Init+0xa8>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_GPIO_Init+0xa8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_GPIO_Init+0xa8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a11      	ldr	r2, [pc, #68]	; (8000690 <MX_GPIO_Init+0xa8>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_GPIO_Init+0xac>)
 8000664:	f001 fbe2 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xac>)
 8000682:	f001 fa4f 	bl	8001b24 <HAL_GPIO_Init>

}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	40011000 	.word	0x40011000

08000698 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	readyPart1 = TRUE;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000284 	.word	0x20000284

080006b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	readyPart2 = TRUE;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <HAL_ADC_ConvCpltCallback+0x18>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000285 	.word	0x20000285

080006d0 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 10; i++){
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e00a      	b.n	80006f4 <HAL_ADC_ErrorCallback+0x24>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <HAL_ADC_ErrorCallback+0x34>)
 80006e4:	f001 fbba 	bl	8001e5c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 f9c7 	bl	8000a7c <HAL_Delay>
	for(int i = 0; i < 10; i++){
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b09      	cmp	r3, #9
 80006f8:	ddf1      	ble.n	80006de <HAL_ADC_ErrorCallback+0xe>
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40011000 	.word	0x40011000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_MspInit+0x40>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <HAL_MspInit+0x40>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x40>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x40>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_MspInit+0x40>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_MspInit+0x40>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a47      	ldr	r2, [pc, #284]	; (8000890 <HAL_ADC_MspInit+0x138>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d14a      	bne.n	800080e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000778:	4b46      	ldr	r3, [pc, #280]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a45      	ldr	r2, [pc, #276]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800077e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b43      	ldr	r3, [pc, #268]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b40      	ldr	r3, [pc, #256]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a3f      	ldr	r2, [pc, #252]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80007a8:	2366      	movs	r3, #102	; 0x66
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ac:	2303      	movs	r3, #3
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4619      	mov	r1, r3
 80007b6:	4838      	ldr	r0, [pc, #224]	; (8000898 <HAL_ADC_MspInit+0x140>)
 80007b8:	f001 f9b4 	bl	8001b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007be:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 80007c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007e6:	2220      	movs	r2, #32
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007f0:	482a      	ldr	r0, [pc, #168]	; (800089c <HAL_ADC_MspInit+0x144>)
 80007f2:	f000 ffa9 	bl	8001748 <HAL_DMA_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007fc:	f7ff ff84 	bl	8000708 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a26      	ldr	r2, [pc, #152]	; (800089c <HAL_ADC_MspInit+0x144>)
 8000804:	621a      	str	r2, [r3, #32]
 8000806:	4a25      	ldr	r2, [pc, #148]	; (800089c <HAL_ADC_MspInit+0x144>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800080c:	e03c      	b.n	8000888 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d137      	bne.n	8000888 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800081e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a11      	ldr	r2, [pc, #68]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
 8000860:	2398      	movs	r3, #152	; 0x98
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000864:	2303      	movs	r3, #3
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4619      	mov	r1, r3
 800086e:	480a      	ldr	r0, [pc, #40]	; (8000898 <HAL_ADC_MspInit+0x140>)
 8000870:	f001 f958 	bl	8001b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4619      	mov	r1, r3
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <HAL_ADC_MspInit+0x150>)
 8000884:	f001 f94e 	bl	8001b24 <HAL_GPIO_Init>
}
 8000888:	bf00      	nop
 800088a:	3730      	adds	r7, #48	; 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40012400 	.word	0x40012400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800
 800089c:	200001f8 	.word	0x200001f8
 80008a0:	40020008 	.word	0x40020008
 80008a4:	40012800 	.word	0x40012800
 80008a8:	40010c00 	.word	0x40010c00

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <HAL_TIM_Base_MspInit+0x34>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10b      	bne.n	80008d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40000400 	.word	0x40000400
 80008e4:	40021000 	.word	0x40021000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092e:	f000 f889 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <DMA1_Channel1_IRQHandler+0x10>)
 800093e:	f000 ffbd 	bl	80018bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200001f8 	.word	0x200001f8

0800094c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000952:	f001 fbcd 	bl	80020f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000f54 	.word	0x20000f54

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000992:	f7ff ffe5 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000996:	f008 fd45 	bl	8009424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fbd7 	bl	800014c <main>
  bx lr
 800099e:	4770      	bx	lr
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80009a8:	0800951c 	.word	0x0800951c
  ldr r2, =_sbss
 80009ac:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80009b0:	20001460 	.word	0x20001460

080009b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_Init+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_Init+0x28>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 fe7b 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fe9e 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fe93 	bl	800172e <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a20:	f000 fe5b 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_IncTick+0x20>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000288 	.word	0x20000288

08000a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000288 	.word	0x20000288

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff fff0 	bl	8000a68 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffe0 	bl	8000a68 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0be      	b.n	8000c64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d109      	bne.n	8000b08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fe28 	bl	8000758 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 fab3 	bl	8001074 <ADC_ConversionStop_Disable>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8099 	bne.w	8000c52 <HAL_ADC_Init+0x18e>
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8095 	bne.w	8000c52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b30:	f023 0302 	bic.w	r3, r3, #2
 8000b34:	f043 0202 	orr.w	r2, r3, #2
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7b1b      	ldrb	r3, [r3, #12]
 8000b4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b5c:	d003      	beq.n	8000b66 <HAL_ADC_Init+0xa2>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d102      	bne.n	8000b6c <HAL_ADC_Init+0xa8>
 8000b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6a:	e000      	b.n	8000b6e <HAL_ADC_Init+0xaa>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7d1b      	ldrb	r3, [r3, #20]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d119      	bne.n	8000bb0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7b1b      	ldrb	r3, [r3, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	035a      	lsls	r2, r3, #13
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e00b      	b.n	8000bb0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f043 0220 	orr.w	r2, r3, #32
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <HAL_ADC_Init+0x1a8>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_Init+0x126>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_ADC_Init+0x1ac>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d10b      	bne.n	8000c30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c22:	f023 0303 	bic.w	r3, r3, #3
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c2e:	e018      	b.n	8000c62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	f023 0312 	bic.w	r3, r3, #18
 8000c38:	f043 0210 	orr.w	r2, r3, #16
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	f043 0201 	orr.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c50:	e007      	b.n	8000c62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	f043 0210 	orr.w	r2, r3, #16
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	ffe1f7fd 	.word	0xffe1f7fd
 8000c70:	ff1f0efe 	.word	0xff1f0efe

08000c74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <HAL_ADC_Start+0x1a>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e098      	b.n	8000dc0 <HAL_ADC_Start+0x14c>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f992 	bl	8000fc0 <ADC_Enable>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8087 	bne.w	8000db6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a41      	ldr	r2, [pc, #260]	; (8000dc8 <HAL_ADC_Start+0x154>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d105      	bne.n	8000cd2 <HAL_ADC_Start+0x5e>
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <HAL_ADC_Start+0x158>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d115      	bne.n	8000cfe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d026      	beq.n	8000d3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cfc:	e01d      	b.n	8000d3a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <HAL_ADC_Start+0x158>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d004      	beq.n	8000d1e <HAL_ADC_Start+0xaa>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <HAL_ADC_Start+0x154>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10d      	bne.n	8000d3a <HAL_ADC_Start+0xc6>
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HAL_ADC_Start+0x158>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d007      	beq.n	8000d3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	f023 0206 	bic.w	r2, r3, #6
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d52:	e002      	b.n	8000d5a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f06f 0202 	mvn.w	r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d7a:	d113      	bne.n	8000da4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d80:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <HAL_ADC_Start+0x154>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d105      	bne.n	8000d92 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_ADC_Start+0x158>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d108      	bne.n	8000da4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	e00c      	b.n	8000dbe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	e003      	b.n	8000dbe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40012800 	.word	0x40012800
 8000dcc:	40012400 	.word	0x40012400

08000dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_ADC_ConfigChannel+0x20>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e0dc      	b.n	8000faa <HAL_ADC_ConfigChannel+0x1da>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d81c      	bhi.n	8000e3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	3b05      	subs	r3, #5
 8000e12:	221f      	movs	r2, #31
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4019      	ands	r1, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	3b05      	subs	r3, #5
 8000e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
 8000e38:	e03c      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	d81c      	bhi.n	8000e7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b23      	subs	r3, #35	; 0x23
 8000e54:	221f      	movs	r2, #31
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	4019      	ands	r1, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b23      	subs	r3, #35	; 0x23
 8000e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7a:	e01b      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3b41      	subs	r3, #65	; 0x41
 8000e8e:	221f      	movs	r2, #31
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4019      	ands	r1, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3b41      	subs	r3, #65	; 0x41
 8000ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b09      	cmp	r3, #9
 8000eba:	d91c      	bls.n	8000ef6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68d9      	ldr	r1, [r3, #12]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b1e      	subs	r3, #30
 8000ece:	2207      	movs	r2, #7
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4019      	ands	r1, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6898      	ldr	r0, [r3, #8]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3b1e      	subs	r3, #30
 8000ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	e019      	b.n	8000f2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6919      	ldr	r1, [r3, #16]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	2207      	movs	r2, #7
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4019      	ands	r1, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	6898      	ldr	r0, [r3, #8]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d003      	beq.n	8000f3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f36:	2b11      	cmp	r3, #17
 8000f38:	d132      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d125      	bne.n	8000f90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d126      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	d11a      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <HAL_ADC_ConfigChannel+0x1ec>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0c9a      	lsrs	r2, r3, #18
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <HAL_ADC_ConfigChannel+0x1b2>
 8000f8e:	e007      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	f043 0220 	orr.w	r2, r3, #32
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40012400 	.word	0x40012400
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	431bde83 	.word	0x431bde83

08000fc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d040      	beq.n	8001060 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <ADC_Enable+0xac>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <ADC_Enable+0xb0>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	0c9b      	lsrs	r3, r3, #18
 8000ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ffc:	e002      	b.n	8001004 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3b01      	subs	r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f9      	bne.n	8000ffe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800100a:	f7ff fd2d 	bl	8000a68 <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001010:	e01f      	b.n	8001052 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001012:	f7ff fd29 	bl	8000a68 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d918      	bls.n	8001052 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b01      	cmp	r3, #1
 800102c:	d011      	beq.n	8001052 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f043 0210 	orr.w	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e007      	b.n	8001062 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1d8      	bne.n	8001012 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000
 8001070:	431bde83 	.word	0x431bde83

08001074 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b01      	cmp	r3, #1
 800108c:	d12e      	bne.n	80010ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800109e:	f7ff fce3 	bl	8000a68 <HAL_GetTick>
 80010a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010a4:	e01b      	b.n	80010de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010a6:	f7ff fcdf 	bl	8000a68 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d914      	bls.n	80010de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10d      	bne.n	80010de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e007      	b.n	80010ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d0dc      	beq.n	80010a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800110c:	2b00      	cmp	r3, #0
 800110e:	d127      	bne.n	8001160 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001126:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800112a:	d115      	bne.n	8001158 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001130:	2b00      	cmp	r3, #0
 8001132:	d111      	bne.n	8001158 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff faab 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800115e:	e004      	b.n	800116a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	4798      	blx	r3
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff fa89 	bl	8000698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	f043 0204 	orr.w	r2, r3, #4
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff fa8b 	bl	80006d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80011de:	2302      	movs	r3, #2
 80011e0:	e095      	b.n	800130e <HAL_ADCEx_Calibration_Start+0x14a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff42 	bl	8001074 <ADC_ConversionStop_Disable>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 8084 	bne.w	8001304 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001204:	f023 0302 	bic.w	r3, r3, #2
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_ADCEx_Calibration_Start+0x154>)
 8001212:	681c      	ldr	r4, [r3, #0]
 8001214:	2002      	movs	r0, #2
 8001216:	f002 ffb9 	bl	800418c <HAL_RCCEx_GetPeriphCLKFreq>
 800121a:	4603      	mov	r3, r0
 800121c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001220:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001222:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001224:	e002      	b.n	800122c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3b01      	subs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fec4 	bl	8000fc0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0208 	orr.w	r2, r2, #8
 8001246:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001248:	f7ff fc0e 	bl	8000a68 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800124e:	e01b      	b.n	8001288 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001250:	f7ff fc0a 	bl	8000a68 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b0a      	cmp	r3, #10
 800125c:	d914      	bls.n	8001288 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00d      	beq.n	8001288 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	f023 0312 	bic.w	r3, r3, #18
 8001274:	f043 0210 	orr.w	r2, r3, #16
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e042      	b.n	800130e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1dc      	bne.n	8001250 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0204 	orr.w	r2, r2, #4
 80012a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012a6:	f7ff fbdf 	bl	8000a68 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80012ac:	e01b      	b.n	80012e6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012ae:	f7ff fbdb 	bl	8000a68 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b0a      	cmp	r3, #10
 80012ba:	d914      	bls.n	80012e6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00d      	beq.n	80012e6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f023 0312 	bic.w	r3, r3, #18
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e013      	b.n	800130e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1dc      	bne.n	80012ae <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	f023 0303 	bic.w	r3, r3, #3
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000

0800131c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b092      	sub	sp, #72	; 0x48
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2230      	movs	r2, #48	; 0x30
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f008 f898 	bl	800946c <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8001346:	2302      	movs	r3, #2
 8001348:	e08f      	b.n	800146a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8001354:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800135e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001362:	d00b      	beq.n	800137c <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e076      	b.n	800146a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff fe1f 	bl	8000fc0 <ADC_Enable>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 8001388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe13 	bl	8000fc0 <ADC_Enable>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d15a      	bne.n	800145e <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f06f 0202 	mvn.w	r2, #2
 8001404:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001414:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6a18      	ldr	r0, [r3, #32]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	334c      	adds	r3, #76	; 0x4c
 8001420:	4619      	mov	r1, r3
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f000 f9e9 	bl	80017fc <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001434:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001438:	d108      	bne.n	800144c <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	e00c      	b.n	8001466 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	e003      	b.n	8001466 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001466:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800146a:	4618      	mov	r0, r3
 800146c:	3748      	adds	r7, #72	; 0x48
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40012800 	.word	0x40012800
 8001478:	ffeffcfe 	.word	0xffeffcfe
 800147c:	080010f7 	.word	0x080010f7
 8001480:	08001173 	.word	0x08001173
 8001484:	0800118f 	.word	0x0800118f

08001488 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	; 0x40
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2230      	movs	r2, #48	; 0x30
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 ffe3 	bl	800946c <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e032      	b.n	800151a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 80014be:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d016      	beq.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d010      	beq.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d10b      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	e008      	b.n	800150e <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001516:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800151a:	4618      	mov	r0, r3
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40012800 	.word	0x40012800
 8001528:	40012400 	.word	0x40012400

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4906      	ldr	r1, [pc, #24]	; (80015c4 <__NVIC_EnableIRQ+0x34>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a4:	f7ff ff90 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff2d 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff42 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff35 	bl	8001590 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e043      	b.n	80017e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_DMA_Init+0xa8>)
 8001766:	4413      	add	r3, r2
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_DMA_Init+0xac>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	009a      	lsls	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_DMA_Init+0xb0>)
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001792:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	bffdfff8 	.word	0xbffdfff8
 80017f4:	cccccccd 	.word	0xcccccccd
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_DMA_Start_IT+0x20>
 8001818:	2302      	movs	r3, #2
 800181a:	e04a      	b.n	80018b2 <HAL_DMA_Start_IT+0xb6>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800182a:	2b01      	cmp	r3, #1
 800182c:	d13a      	bne.n	80018a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2202      	movs	r2, #2
 8001832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f938 	bl	8001ac8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 020e 	orr.w	r2, r2, #14
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e00f      	b.n	8001892 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0204 	bic.w	r2, r2, #4
 8001880:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 020a 	orr.w	r2, r2, #10
 8001890:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e005      	b.n	80018b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018ac:	2302      	movs	r3, #2
 80018ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	2204      	movs	r2, #4
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d04f      	beq.n	8001984 <HAL_DMA_IRQHandler+0xc8>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d04a      	beq.n	8001984 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0204 	bic.w	r2, r2, #4
 800190a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a66      	ldr	r2, [pc, #408]	; (8001aac <HAL_DMA_IRQHandler+0x1f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d029      	beq.n	800196a <HAL_DMA_IRQHandler+0xae>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <HAL_DMA_IRQHandler+0xaa>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_DMA_IRQHandler+0x1f8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01a      	beq.n	8001960 <HAL_DMA_IRQHandler+0xa4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a62      	ldr	r2, [pc, #392]	; (8001ab8 <HAL_DMA_IRQHandler+0x1fc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d012      	beq.n	800195a <HAL_DMA_IRQHandler+0x9e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_DMA_IRQHandler+0x200>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00a      	beq.n	8001954 <HAL_DMA_IRQHandler+0x98>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <HAL_DMA_IRQHandler+0x204>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d102      	bne.n	800194e <HAL_DMA_IRQHandler+0x92>
 8001948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800194c:	e00e      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 800194e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001952:	e00b      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 8001954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001958:	e008      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	e005      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 8001960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001964:	e002      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	e000      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 800196a:	2304      	movs	r3, #4
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <HAL_DMA_IRQHandler+0x208>)
 800196e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8094 	beq.w	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001982:	e08e      	b.n	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2202      	movs	r2, #2
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d056      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x186>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d051      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 020a 	bic.w	r2, r2, #10
 80019ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a38      	ldr	r2, [pc, #224]	; (8001aac <HAL_DMA_IRQHandler+0x1f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d029      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x166>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a37      	ldr	r2, [pc, #220]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x162>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a35      	ldr	r2, [pc, #212]	; (8001ab4 <HAL_DMA_IRQHandler+0x1f8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01a      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x15c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_DMA_IRQHandler+0x1fc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d012      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x156>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a32      	ldr	r2, [pc, #200]	; (8001abc <HAL_DMA_IRQHandler+0x200>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x150>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_DMA_IRQHandler+0x204>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d102      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x14a>
 8001a00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a04:	e00e      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0a:	e00b      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a10:	e008      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	e005      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1c:	e002      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e000      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a22:	2302      	movs	r3, #2
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_DMA_IRQHandler+0x208>)
 8001a26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d034      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a40:	e02f      	b.n	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2208      	movs	r2, #8
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d028      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1e8>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020e 	bic.w	r2, r2, #14
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
    }
  }
  return;
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
}
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40020008 	.word	0x40020008
 8001ab0:	4002001c 	.word	0x4002001c
 8001ab4:	40020030 	.word	0x40020030
 8001ab8:	40020044 	.word	0x40020044
 8001abc:	40020058 	.word	0x40020058
 8001ac0:	4002006c 	.word	0x4002006c
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d108      	bne.n	8001b08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b06:	e007      	b.n	8001b18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e169      	b.n	8001e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8158 	bne.w	8001e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a9a      	ldr	r2, [pc, #616]	; (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d05e      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b60:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d875      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b66:	4a98      	ldr	r2, [pc, #608]	; (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d058      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b6c:	4a96      	ldr	r2, [pc, #600]	; (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d86f      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b72:	4a96      	ldr	r2, [pc, #600]	; (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d052      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b78:	4a94      	ldr	r2, [pc, #592]	; (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d869      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a94      	ldr	r2, [pc, #592]	; (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04c      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b84:	4a92      	ldr	r2, [pc, #584]	; (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d863      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a92      	ldr	r2, [pc, #584]	; (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d046      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b90:	4a90      	ldr	r2, [pc, #576]	; (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d85d      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_GPIO_Init+0xcc>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d859      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_GPIO_Init+0x80>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001bf9 	.word	0x08001bf9
 8001bac:	08001c0b 	.word	0x08001c0b
 8001bb0:	08001c4d 	.word	0x08001c4d
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001c53 	.word	0x08001c53
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c53 	.word	0x08001c53
 8001bc4:	08001c53 	.word	0x08001c53
 8001bc8:	08001c53 	.word	0x08001c53
 8001bcc:	08001c53 	.word	0x08001c53
 8001bd0:	08001c53 	.word	0x08001c53
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c53 	.word	0x08001c53
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	4a79      	ldr	r2, [pc, #484]	; (8001dd8 <HAL_GPIO_Init+0x2b4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf6:	e02c      	b.n	8001c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e024      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e01f      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e01a      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c26:	2304      	movs	r3, #4
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e013      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]
          break;
 8001c3e:	e009      	b.n	8001c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	615a      	str	r2, [r3, #20]
          break;
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          break;
 8001c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d801      	bhi.n	8001c5e <HAL_GPIO_Init+0x13a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_Init+0x13e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d802      	bhi.n	8001c70 <HAL_GPIO_Init+0x14c>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x152>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3b08      	subs	r3, #8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80b1 	beq.w	8001e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbc:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1ec>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1e8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d10:	2300      	movs	r3, #0
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d22:	492f      	ldr	r1, [pc, #188]	; (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	492c      	ldr	r1, [pc, #176]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4928      	ldr	r1, [pc, #160]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4922      	ldr	r1, [pc, #136]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	491e      	ldr	r1, [pc, #120]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	4918      	ldr	r1, [pc, #96]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4914      	ldr	r1, [pc, #80]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d021      	beq.n	8001df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
 8001dc0:	e021      	b.n	8001e06 <HAL_GPIO_Init+0x2e2>
 8001dc2:	bf00      	nop
 8001dc4:	10320000 	.word	0x10320000
 8001dc8:	10310000 	.word	0x10310000
 8001dcc:	10220000 	.word	0x10220000
 8001dd0:	10210000 	.word	0x10210000
 8001dd4:	10120000 	.word	0x10120000
 8001dd8:	10110000 	.word	0x10110000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40010800 	.word	0x40010800
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4909      	ldr	r1, [pc, #36]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f ae8e 	bne.w	8001b38 <HAL_GPIO_Init+0x14>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	372c      	adds	r7, #44	; 0x2c
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43d9      	mvns	r1, r3
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e90:	b08b      	sub	sp, #44	; 0x2c
 8001e92:	af06      	add	r7, sp, #24
 8001e94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0fd      	b.n	800209c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d106      	bne.n	8001eba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f007 f80b 	bl	8008ed0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fcfa 	bl	80048c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	687e      	ldr	r6, [r7, #4]
 8001ed4:	466d      	mov	r5, sp
 8001ed6:	f106 0410 	add.w	r4, r6, #16
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	1d33      	adds	r3, r6, #4
 8001ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f002 fcc4 	bl	8004874 <USB_CoreInit>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0ce      	b.n	800209c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fcf5 	bl	80048f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e04c      	b.n	8001faa <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3301      	adds	r3, #1
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	b298      	uxth	r0, r3
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3336      	adds	r3, #54	; 0x36
 8001f4e:	4602      	mov	r2, r0
 8001f50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	3303      	adds	r3, #3
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	3338      	adds	r3, #56	; 0x38
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	333c      	adds	r3, #60	; 0x3c
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3340      	adds	r3, #64	; 0x40
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3ad      	bcc.n	8001f10 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e044      	b.n	8002044 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3b5      	bcc.n	8001fba <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	687e      	ldr	r6, [r7, #4]
 8002056:	466d      	mov	r5, sp
 8002058:	f106 0410 	add.w	r4, r6, #16
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	602b      	str	r3, [r5, #0]
 8002064:	1d33      	adds	r3, r6, #4
 8002066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	f002 fc4f 	bl	800490c <USB_DevInit>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e00d      	b.n	800209c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f005 f901 	bl	800729c <USB_DevDisconnect>

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_PCD_Start+0x16>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e016      	b.n	80020e8 <HAL_PCD_Start+0x44>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fbe4 	bl	8004894 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020cc:	2101      	movs	r1, #1
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f007 f971 	bl	80093b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f005 f8d5 	bl	8007288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f8d7 	bl	80072b0 <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210c:	d102      	bne.n	8002114 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fb5f 	bl	80027d2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f005 f8c9 	bl	80072b0 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d112      	bne.n	8002150 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213c:	b292      	uxth	r2, r2
 800213e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f006 ff3f 	bl	8008fc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002148:	2100      	movs	r1, #0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f923 	bl	8002396 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f005 f8ab 	bl	80072b0 <USB_ReadInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002164:	d10b      	bne.n	800217e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f005 f894 	bl	80072b0 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800218e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002192:	d10b      	bne.n	80021ac <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a6:	b292      	uxth	r2, r2
 80021a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f005 f87d 	bl	80072b0 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c0:	d126      	bne.n	8002210 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0204 	bic.w	r2, r2, #4
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0208 	bic.w	r2, r2, #8
 80021ec:	b292      	uxth	r2, r2
 80021ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f006 ff20 	bl	8009038 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f005 f84b 	bl	80072b0 <USB_ReadInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002224:	f040 8082 	bne.w	800232c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
 800222c:	e010      	b.n	8002250 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	7ffb      	ldrb	r3, [r7, #31]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	7ffb      	ldrb	r3, [r7, #31]
 800223c:	8812      	ldrh	r2, [r2, #0]
 800223e:	b292      	uxth	r2, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	3320      	adds	r3, #32
 8002244:	443b      	add	r3, r7
 8002246:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	3301      	adds	r3, #1
 800224e:	77fb      	strb	r3, [r7, #31]
 8002250:	7ffb      	ldrb	r3, [r7, #31]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d9eb      	bls.n	800222e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	b292      	uxth	r2, r2
 800226a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	b292      	uxth	r2, r2
 8002282:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002286:	bf00      	nop
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002290:	b29b      	uxth	r3, r3
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f6      	beq.n	8002288 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ac:	b292      	uxth	r2, r2
 80022ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	77fb      	strb	r3, [r7, #31]
 80022b6:	e00f      	b.n	80022d8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4611      	mov	r1, r2
 80022c0:	7ffa      	ldrb	r2, [r7, #31]
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	440a      	add	r2, r1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	3320      	adds	r3, #32
 80022ca:	443b      	add	r3, r7
 80022cc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80022d0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	3301      	adds	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	2b07      	cmp	r3, #7
 80022dc:	d9ec      	bls.n	80022b8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0208 	orr.w	r2, r2, #8
 80022f0:	b292      	uxth	r2, r2
 80022f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002308:	b292      	uxth	r2, r2
 800230a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0204 	orr.w	r2, r2, #4
 8002320:	b292      	uxth	r2, r2
 8002322:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 fe6c 	bl	8009004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f004 ffbd 	bl	80072b0 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d10e      	bne.n	8002360 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002354:	b292      	uxth	r2, r2
 8002356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f006 fe25 	bl	8008faa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 ffa3 	bl	80072b0 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002374:	d10b      	bne.n	800238e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	b292      	uxth	r2, r2
 800238a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_SetAddress+0x1a>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e013      	b.n	80023d8 <HAL_PCD_SetAddress+0x42>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 ff4a 	bl	8007262 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	70fb      	strb	r3, [r7, #3]
 80023f2:	460b      	mov	r3, r1
 80023f4:	803b      	strh	r3, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0e      	bge.n	8002424 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	705a      	strb	r2, [r3, #1]
 8002422:	e00e      	b.n	8002442 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 0207 	and.w	r2, r3, #7
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800244e:	883a      	ldrh	r2, [r7, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	78ba      	ldrb	r2, [r7, #2]
 8002458:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800246c:	78bb      	ldrb	r3, [r7, #2]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d102      	bne.n	8002478 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_EP_Open+0xa6>
 8002482:	2302      	movs	r3, #2
 8002484:	e00e      	b.n	80024a4 <HAL_PCD_EP_Open+0xc4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fa59 	bl	800494c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80024a2:	7afb      	ldrb	r3, [r7, #11]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da0e      	bge.n	80024de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	705a      	strb	r2, [r3, #1]
 80024dc:	e00e      	b.n	80024fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 0207 	and.w	r2, r3, #7
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_EP_Close+0x6a>
 8002512:	2302      	movs	r3, #2
 8002514:	e00e      	b.n	8002534 <HAL_PCD_EP_Close+0x88>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	f002 fd7b 	bl	8005020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	f003 0207 	and.w	r2, r3, #7
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	b2da      	uxtb	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 ff2d 	bl	80053f8 <USB_EPStartXfer>
 800259e:	e005      	b.n	80025ac <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 ff26 	bl	80053f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 0207 	and.w	r2, r3, #7
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80025d8:	681b      	ldr	r3, [r3, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2201      	movs	r2, #1
 800262e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	b2da      	uxtb	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6979      	ldr	r1, [r7, #20]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fed3 	bl	80053f8 <USB_EPStartXfer>
 8002652:	e005      	b.n	8002660 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6979      	ldr	r1, [r7, #20]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fecc 	bl	80053f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 0207 	and.w	r2, r3, #7
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d901      	bls.n	8002688 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e04c      	b.n	8002722 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da0e      	bge.n	80026ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00c      	b.n	80026c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_EP_SetStall+0x7e>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e01c      	b.n	8002722 <HAL_PCD_EP_SetStall+0xb8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 fcb6 	bl	8007068 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f004 fddb 	bl	80072ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d901      	bls.n	8002748 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e040      	b.n	80027ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da0e      	bge.n	800276e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	705a      	strb	r2, [r3, #1]
 800276c:	e00e      	b.n	800278c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 0207 	and.w	r2, r3, #7
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_PCD_EP_ClrStall+0x82>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e00e      	b.n	80027ca <HAL_PCD_EP_ClrStall+0xa0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 fca4 	bl	8007108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b08e      	sub	sp, #56	; 0x38
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027da:	e2ec      	b.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80027f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8161 	bne.w	8002abe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d152      	bne.n	80028ac <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	81fb      	strh	r3, [r7, #14]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3328      	adds	r3, #40	; 0x28
 800282e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002838:	b29b      	uxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	3302      	adds	r3, #2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	441a      	add	r2, r3
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800286a:	2100      	movs	r1, #0
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 fb82 	bl	8008f76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 829b 	beq.w	8002db6 <PCD_EP_ISR_Handler+0x5e4>
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 8296 	bne.w	8002db6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002896:	b2da      	uxtb	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b292      	uxth	r2, r2
 800289e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028aa:	e284      	b.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d034      	beq.n	8002930 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	3306      	adds	r3, #6
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002904:	b29b      	uxth	r3, r3
 8002906:	f004 fd32 	bl	800736e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29a      	uxth	r2, r3
 8002912:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002916:	4013      	ands	r3, r2
 8002918:	823b      	strh	r3, [r7, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	8a3a      	ldrh	r2, [r7, #16]
 8002920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002924:	b292      	uxth	r2, r2
 8002926:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f006 faf7 	bl	8008f1c <HAL_PCD_SetupStageCallback>
 800292e:	e242      	b.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002930:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002934:	2b00      	cmp	r3, #0
 8002936:	f280 823e 	bge.w	8002db6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29a      	uxth	r2, r3
 8002942:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002946:	4013      	ands	r3, r2
 8002948:	83bb      	strh	r3, [r7, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	8bba      	ldrh	r2, [r7, #28]
 8002950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002954:	b292      	uxth	r2, r2
 8002956:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	3306      	adds	r3, #6
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d019      	beq.n	80029c0 <PCD_EP_ISR_Handler+0x1ee>
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	6959      	ldr	r1, [r3, #20]
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f004 fce2 	bl	800736e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	441a      	add	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029b8:	2100      	movs	r1, #0
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f006 fac0 	bl	8008f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 81f2 	bne.w	8002db6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d112      	bne.n	8002a20 <PCD_EP_ISR_Handler+0x24e>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	e02f      	b.n	8002a80 <PCD_EP_ISR_Handler+0x2ae>
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b3e      	cmp	r3, #62	; 0x3e
 8002a26:	d813      	bhi.n	8002a50 <PCD_EP_ISR_Handler+0x27e>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <PCD_EP_ISR_Handler+0x270>
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	3301      	adds	r3, #1
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	e017      	b.n	8002a80 <PCD_EP_ISR_Handler+0x2ae>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <PCD_EP_ISR_Handler+0x298>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	3b01      	subs	r3, #1
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	827b      	strh	r3, [r7, #18]
 8002a92:	8a7b      	ldrh	r3, [r7, #18]
 8002a94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a98:	827b      	strh	r3, [r7, #18]
 8002a9a:	8a7b      	ldrh	r3, [r7, #18]
 8002a9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002aa0:	827b      	strh	r3, [r7, #18]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	8a7b      	ldrh	r3, [r7, #18]
 8002aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	8013      	strh	r3, [r2, #0]
 8002abc:	e17b      	b.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ad0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f280 80ea 	bge.w	8002cae <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002af0:	4013      	ands	r3, r2
 8002af2:	853b      	strh	r3, [r7, #40]	; 0x28
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b08:	b292      	uxth	r2, r2
 8002b0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	7b1b      	ldrb	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d122      	bne.n	8002b70 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3306      	adds	r3, #6
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b52:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002b54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8087 	beq.w	8002c6a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	6959      	ldr	r1, [r3, #20]
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	88da      	ldrh	r2, [r3, #6]
 8002b68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b6a:	f004 fc00 	bl	800736e <USB_ReadPMA>
 8002b6e:	e07c      	b.n	8002c6a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	78db      	ldrb	r3, [r3, #3]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d108      	bne.n	8002b8a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f927 	bl	8002dd2 <HAL_PCD_EP_DB_Receive>
 8002b84:	4603      	mov	r3, r0
 8002b86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b88:	e06f      	b.n	8002c6a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	441a      	add	r2, r3
 8002bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d021      	beq.n	8002c28 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02a      	beq.n	8002c6a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	6959      	ldr	r1, [r3, #20]
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	891a      	ldrh	r2, [r3, #8]
 8002c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c22:	f004 fba4 	bl	800736e <USB_ReadPMA>
 8002c26:	e020      	b.n	8002c6a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3306      	adds	r3, #6
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c50:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	6959      	ldr	r1, [r3, #20]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	895a      	ldrh	r2, [r3, #10]
 8002c64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c66:	f004 fb82 	bl	800736e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c70:	441a      	add	r2, r3
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c7c:	441a      	add	r2, r3
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <PCD_EP_ISR_Handler+0x4c2>
 8002c8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d206      	bcs.n	8002ca2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f006 f950 	bl	8008f40 <HAL_PCD_DataOutStageCallback>
 8002ca0:	e005      	b.n	8002cae <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 fba5 	bl	80053f8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002cae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d07e      	beq.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002cb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	843b      	strh	r3, [r7, #32]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	8c3b      	ldrh	r3, [r7, #32]
 8002cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	78db      	ldrb	r3, [r3, #3]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d00c      	beq.n	8002d26 <PCD_EP_ISR_Handler+0x554>
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	78db      	ldrb	r3, [r3, #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d146      	bne.n	8002daa <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d141      	bne.n	8002daa <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	8bfb      	ldrh	r3, [r7, #30]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d906      	bls.n	8002d68 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	8bfb      	ldrh	r3, [r7, #30]
 8002d60:	1ad2      	subs	r2, r2, r3
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	619a      	str	r2, [r3, #24]
 8002d66:	e002      	b.n	8002d6e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f006 f8fa 	bl	8008f76 <HAL_PCD_DataInStageCallback>
 8002d82:	e018      	b.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	8bfb      	ldrh	r3, [r7, #30]
 8002d8a:	441a      	add	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	8bfb      	ldrh	r3, [r7, #30]
 8002d96:	441a      	add	r2, r3
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fb28 	bl	80053f8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002da8:	e005      	b.n	8002db6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002daa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f91b 	bl	8002fec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f6ff ad0a 	blt.w	80027dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3738      	adds	r7, #56	; 0x38
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d07e      	beq.n	8002ee8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	8b7b      	ldrh	r3, [r7, #26]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d306      	bcc.n	8002e2c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	8b7b      	ldrh	r3, [r7, #26]
 8002e24:	1ad2      	subs	r2, r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	619a      	str	r2, [r3, #24]
 8002e2a:	e002      	b.n	8002e32 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d123      	bne.n	8002e82 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e54:	833b      	strh	r3, [r7, #24]
 8002e56:	8b3b      	ldrh	r3, [r7, #24]
 8002e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e5c:	833b      	strh	r3, [r7, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	8b3b      	ldrh	r3, [r7, #24]
 8002e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01f      	beq.n	8002ecc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	82fb      	strh	r3, [r7, #22]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	8afb      	ldrh	r3, [r7, #22]
 8002eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8087 	beq.w	8002fe2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6959      	ldr	r1, [r3, #20]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	891a      	ldrh	r2, [r3, #8]
 8002ee0:	8b7b      	ldrh	r3, [r7, #26]
 8002ee2:	f004 fa44 	bl	800736e <USB_ReadPMA>
 8002ee6:	e07c      	b.n	8002fe2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	3306      	adds	r3, #6
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	8b7b      	ldrh	r3, [r7, #26]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d306      	bcc.n	8002f2a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	8b7b      	ldrh	r3, [r7, #26]
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	619a      	str	r2, [r3, #24]
 8002f28:	e002      	b.n	8002f30 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d123      	bne.n	8002f80 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	83fb      	strh	r3, [r7, #30]
 8002f54:	8bfb      	ldrh	r3, [r7, #30]
 8002f56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f5a:	83fb      	strh	r3, [r7, #30]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	8bfb      	ldrh	r3, [r7, #30]
 8002f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11f      	bne.n	8002fca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa4:	83bb      	strh	r3, [r7, #28]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	8bbb      	ldrh	r3, [r7, #28]
 8002fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fca:	8b7b      	ldrh	r3, [r7, #26]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6959      	ldr	r1, [r3, #20]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	895a      	ldrh	r2, [r3, #10]
 8002fdc:	8b7b      	ldrh	r3, [r7, #26]
 8002fde:	f004 f9c6 	bl	800736e <USB_ReadPMA>
    }
  }

  return count;
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b0a2      	sub	sp, #136	; 0x88
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 81c7 	beq.w	8003394 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	3302      	adds	r3, #2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800303a:	429a      	cmp	r2, r3
 800303c:	d907      	bls.n	800304e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003046:	1ad2      	subs	r2, r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e002      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80b9 	bne.w	80031d0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d126      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	4413      	add	r3, r2
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	011a      	lsls	r2, r3, #4
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	4413      	add	r3, r2
 8003088:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003098:	b29a      	uxth	r2, r3
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	e01a      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d116      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	4413      	add	r3, r2
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	011a      	lsls	r2, r3, #4
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	4413      	add	r3, r2
 80030de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	2200      	movs	r2, #0
 80030e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d126      	bne.n	8003146 <HAL_PCD_EP_DB_Transmit+0x15a>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	011a      	lsls	r2, r3, #4
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800312a:	b29a      	uxth	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800313e:	b29a      	uxth	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	e017      	b.n	8003176 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d113      	bne.n	8003176 <HAL_PCD_EP_DB_Transmit+0x18a>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	4413      	add	r3, r2
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	011a      	lsls	r2, r3, #4
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	4413      	add	r3, r2
 800316a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2200      	movs	r2, #0
 8003174:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f005 fefa 	bl	8008f76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 82d4 	beq.w	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a8:	827b      	strh	r3, [r7, #18]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	8a7b      	ldrh	r3, [r7, #18]
 80031ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]
 80031ce:	e2b2      	b.n	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d021      	beq.n	800321e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800320a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	b29b      	uxth	r3, r3
 800321c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 8286 	bne.w	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003232:	441a      	add	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003240:	441a      	add	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d309      	bcc.n	8003266 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	621a      	str	r2, [r3, #32]
 8003264:	e015      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800326e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003272:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800327c:	e009      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d155      	bne.n	8003346 <HAL_PCD_EP_DB_Transmit+0x35a>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	4413      	add	r3, r2
 80032b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	011a      	lsls	r2, r3, #4
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	4413      	add	r3, r2
 80032bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
 80032c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d112      	bne.n	80032ee <HAL_PCD_EP_DB_Transmit+0x302>
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	e047      	b.n	800337e <HAL_PCD_EP_DB_Transmit+0x392>
 80032ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f0:	2b3e      	cmp	r3, #62	; 0x3e
 80032f2:	d811      	bhi.n	8003318 <HAL_PCD_EP_DB_Transmit+0x32c>
 80032f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003306:	3301      	adds	r3, #1
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
 800330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330c:	b29b      	uxth	r3, r3
 800330e:	029b      	lsls	r3, r3, #10
 8003310:	b29a      	uxth	r2, r3
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	e032      	b.n	800337e <HAL_PCD_EP_DB_Transmit+0x392>
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
 800331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_PCD_EP_DB_Transmit+0x342>
 8003328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332a:	3b01      	subs	r3, #1
 800332c:	64bb      	str	r3, [r7, #72]	; 0x48
 800332e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003330:	b29b      	uxth	r3, r3
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	e01b      	b.n	800337e <HAL_PCD_EP_DB_Transmit+0x392>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d117      	bne.n	800337e <HAL_PCD_EP_DB_Transmit+0x392>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	643b      	str	r3, [r7, #64]	; 0x40
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003362:	4413      	add	r3, r2
 8003364:	643b      	str	r3, [r7, #64]	; 0x40
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	011a      	lsls	r2, r3, #4
 800336c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336e:	4413      	add	r3, r2
 8003370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	b29a      	uxth	r2, r3
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6959      	ldr	r1, [r3, #20]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	891a      	ldrh	r2, [r3, #8]
 800338a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338c:	b29b      	uxth	r3, r3
 800338e:	f003 ffa9 	bl	80072e4 <USB_WritePMA>
 8003392:	e1d0      	b.n	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	3306      	adds	r3, #6
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d307      	bcc.n	80033dc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033d4:	1ad2      	subs	r2, r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	619a      	str	r2, [r3, #24]
 80033da:	e002      	b.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2200      	movs	r2, #0
 80033e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 80c4 	bne.w	8003574 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d126      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x456>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	4413      	add	r3, r2
 800340a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	011a      	lsls	r2, r3, #4
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	4413      	add	r3, r2
 8003416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800341a:	66bb      	str	r3, [r7, #104]	; 0x68
 800341c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003426:	b29a      	uxth	r2, r3
 8003428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343a:	b29a      	uxth	r2, r3
 800343c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	e01a      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d116      	bne.n	8003478 <HAL_PCD_EP_DB_Transmit+0x48c>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	677b      	str	r3, [r7, #116]	; 0x74
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003458:	b29b      	uxth	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345e:	4413      	add	r3, r2
 8003460:	677b      	str	r3, [r7, #116]	; 0x74
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	011a      	lsls	r2, r3, #4
 8003468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346a:	4413      	add	r3, r2
 800346c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003470:	673b      	str	r3, [r7, #112]	; 0x70
 8003472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003474:	2200      	movs	r2, #0
 8003476:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	67bb      	str	r3, [r7, #120]	; 0x78
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	785b      	ldrb	r3, [r3, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d12f      	bne.n	80034e6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800349e:	4413      	add	r3, r2
 80034a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	011a      	lsls	r2, r3, #4
 80034aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034ae:	4413      	add	r3, r2
 80034b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034dc:	b29a      	uxth	r2, r3
 80034de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	e017      	b.n	8003516 <HAL_PCD_EP_DB_Transmit+0x52a>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d113      	bne.n	8003516 <HAL_PCD_EP_DB_Transmit+0x52a>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034fc:	4413      	add	r3, r2
 80034fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	011a      	lsls	r2, r3, #4
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	4413      	add	r3, r2
 800350a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800350e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003512:	2200      	movs	r2, #0
 8003514:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f005 fd2a 	bl	8008f76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 8104 	bne.w	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800355e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800356a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]
 8003572:	e0e0      	b.n	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d121      	bne.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 80b4 	bne.w	8003736 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035d6:	441a      	add	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e4:	441a      	add	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6a1a      	ldr	r2, [r3, #32]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d309      	bcc.n	800360a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003602:	1ad2      	subs	r2, r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	621a      	str	r2, [r3, #32]
 8003608:	e015      	b.n	8003636 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003616:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003620:	e009      	b.n	8003636 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	667b      	str	r3, [r7, #100]	; 0x64
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d155      	bne.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x704>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	65fb      	str	r3, [r7, #92]	; 0x5c
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	4413      	add	r3, r2
 800365a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	011a      	lsls	r2, r3, #4
 8003662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003664:	4413      	add	r3, r2
 8003666:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800366a:	65bb      	str	r3, [r7, #88]	; 0x58
 800366c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366e:	2b00      	cmp	r3, #0
 8003670:	d112      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800367c:	b29a      	uxth	r2, r3
 800367e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003690:	b29a      	uxth	r2, r3
 8003692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	e044      	b.n	8003722 <HAL_PCD_EP_DB_Transmit+0x736>
 8003698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369a:	2b3e      	cmp	r3, #62	; 0x3e
 800369c:	d811      	bhi.n	80036c2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800369e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	657b      	str	r3, [r7, #84]	; 0x54
 80036a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80036ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b0:	3301      	adds	r3, #1
 80036b2:	657b      	str	r3, [r7, #84]	; 0x54
 80036b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	e02f      	b.n	8003722 <HAL_PCD_EP_DB_Transmit+0x736>
 80036c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	657b      	str	r3, [r7, #84]	; 0x54
 80036c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80036d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d4:	3b01      	subs	r3, #1
 80036d6:	657b      	str	r3, [r7, #84]	; 0x54
 80036d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036da:	b29b      	uxth	r3, r3
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	b29b      	uxth	r3, r3
 80036e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	e018      	b.n	8003722 <HAL_PCD_EP_DB_Transmit+0x736>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d114      	bne.n	8003722 <HAL_PCD_EP_DB_Transmit+0x736>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003706:	4413      	add	r3, r2
 8003708:	667b      	str	r3, [r7, #100]	; 0x64
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011a      	lsls	r2, r3, #4
 8003710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003712:	4413      	add	r3, r2
 8003714:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003718:	663b      	str	r3, [r7, #96]	; 0x60
 800371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371c:	b29a      	uxth	r2, r3
 800371e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003720:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6959      	ldr	r1, [r3, #20]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	895a      	ldrh	r2, [r3, #10]
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	b29b      	uxth	r3, r3
 8003732:	f003 fdd7 	bl	80072e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003750:	823b      	strh	r3, [r7, #16]
 8003752:	8a3b      	ldrh	r3, [r7, #16]
 8003754:	f083 0310 	eor.w	r3, r3, #16
 8003758:	823b      	strh	r3, [r7, #16]
 800375a:	8a3b      	ldrh	r3, [r7, #16]
 800375c:	f083 0320 	eor.w	r3, r3, #32
 8003760:	823b      	strh	r3, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	441a      	add	r2, r3
 8003770:	8a3b      	ldrh	r3, [r7, #16]
 8003772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800377a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003782:	b29b      	uxth	r3, r3
 8003784:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3788      	adds	r7, #136	; 0x88
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	4613      	mov	r3, r2
 80037a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e009      	b.n	80037da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037c6:	897a      	ldrh	r2, [r7, #10]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037da:	893b      	ldrh	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2200      	movs	r2, #0
 80037e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	80da      	strh	r2, [r3, #6]
 80037ee:	e00b      	b.n	8003808 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2201      	movs	r2, #1
 80037f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	b29a      	uxth	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e272      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8087 	beq.w	8003942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003834:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b04      	cmp	r3, #4
 800383e:	d00c      	beq.n	800385a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003840:	4b8f      	ldr	r3, [pc, #572]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d112      	bne.n	8003872 <HAL_RCC_OscConfig+0x5e>
 800384c:	4b8c      	ldr	r3, [pc, #560]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d10b      	bne.n	8003872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385a:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d06c      	beq.n	8003940 <HAL_RCC_OscConfig+0x12c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d168      	bne.n	8003940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e24c      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x76>
 800387c:	4b80      	ldr	r3, [pc, #512]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7f      	ldr	r2, [pc, #508]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e02e      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b7b      	ldr	r3, [pc, #492]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7a      	ldr	r2, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b78      	ldr	r3, [pc, #480]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a77      	ldr	r2, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0xbc>
 80038b6:	4b72      	ldr	r3, [pc, #456]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a71      	ldr	r2, [pc, #452]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6e      	ldr	r2, [pc, #440]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 80038d0:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fd f8ba 	bl	8000a68 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fd f8b6 	bl	8000a68 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e200      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b5d      	ldr	r3, [pc, #372]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xe4>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd f8a6 	bl	8000a68 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fd f8a2 	bl	8000a68 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1ec      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x10c>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d063      	beq.n	8003a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394e:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x18c>
 8003966:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1c0      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4939      	ldr	r1, [pc, #228]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	e03a      	b.n	8003a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fd f85b 	bl	8000a68 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fd f857 	bl	8000a68 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1a1      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4927      	ldr	r1, [pc, #156]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fd f83a 	bl	8000a68 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fd f836 	bl	8000a68 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e180      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03a      	beq.n	8003a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fd f81a 	bl	8000a68 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fd f816 	bl	8000a68 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e160      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a56:	2001      	movs	r0, #1
 8003a58:	f000 fac4 	bl	8003fe4 <RCC_Delay>
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fd f800 	bl	8000a68 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fc fffc 	bl	8000a68 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d908      	bls.n	8003a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e146      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	42420000 	.word	0x42420000
 8003a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e9      	bne.n	8003a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a6 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a87      	ldr	r2, [pc, #540]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	61d3      	str	r3, [r2, #28]
 8003ac2:	4b85      	ldr	r3, [pc, #532]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b82      	ldr	r3, [pc, #520]	; (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d118      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ade:	4b7f      	ldr	r3, [pc, #508]	; (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	; (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aea:	f7fc ffbd 	bl	8000a68 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af2:	f7fc ffb9 	bl	8000a68 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	; 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e103      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	4b75      	ldr	r3, [pc, #468]	; (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d106      	bne.n	8003b26 <HAL_RCC_OscConfig+0x312>
 8003b18:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6213      	str	r3, [r2, #32]
 8003b24:	e02d      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x334>
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	4b67      	ldr	r3, [pc, #412]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a66      	ldr	r2, [pc, #408]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	e01c      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCC_OscConfig+0x356>
 8003b50:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a60      	ldr	r2, [pc, #384]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4a5d      	ldr	r2, [pc, #372]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6213      	str	r3, [r2, #32]
 8003b68:	e00b      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a5a      	ldr	r2, [pc, #360]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	6213      	str	r3, [r2, #32]
 8003b76:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 0304 	bic.w	r3, r3, #4
 8003b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d015      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fc ff6d 	bl	8000a68 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fc ff69 	bl	8000a68 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0b1      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ee      	beq.n	8003b92 <HAL_RCC_OscConfig+0x37e>
 8003bb4:	e014      	b.n	8003be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fc ff57 	bl	8000a68 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fc ff53 	bl	8000a68 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e09b      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd4:	4b40      	ldr	r3, [pc, #256]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ee      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8087 	beq.w	8003d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfc:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d061      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d146      	bne.n	8003c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fc ff27 	bl	8000a68 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fc ff23 	bl	8000a68 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e06d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c30:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d108      	bne.n	8003c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a19      	ldr	r1, [r3, #32]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fc fef7 	bl	8000a68 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fc fef3 	bl	8000a68 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e03d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x46a>
 8003c9c:	e035      	b.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fc fee0 	bl	8000a68 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fc fedc 	bl	8000a68 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e026      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x498>
 8003cca:	e01e      	b.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e019      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_OscConfig+0x500>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d0      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4965      	ldr	r1, [pc, #404]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a52      	ldr	r2, [pc, #328]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d040      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e073      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06b      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4936      	ldr	r1, [pc, #216]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fc fe2e 	bl	8000a68 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fc fe2a 	bl	8000a68 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e053      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d210      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 0207 	bic.w	r2, r3, #7
 8003e4e:	4922      	ldr	r1, [pc, #136]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc fd8c 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	080094fc 	.word	0x080094fc
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b490      	push	{r4, r7}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ef4:	1d3c      	adds	r4, r7, #4
 8003ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003efc:	f240 2301 	movw	r3, #513	; 0x201
 8003f00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f16:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x40>
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x46>
 8003f2a:	e02b      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f2e:	623b      	str	r3, [r7, #32]
      break;
 8003f30:	e02b      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	0c9b      	lsrs	r3, r3, #18
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	3328      	adds	r3, #40	; 0x28
 8003f3c:	443b      	add	r3, r7
 8003f3e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f42:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d012      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0c5b      	lsrs	r3, r3, #17
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	3328      	adds	r3, #40	; 0x28
 8003f5a:	443b      	add	r3, r7
 8003f5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f66:	fb03 f202 	mul.w	r2, r3, r2
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	e004      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	623b      	str	r3, [r7, #32]
      break;
 8003f82:	e002      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f86:	623b      	str	r3, [r7, #32]
      break;
 8003f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc90      	pop	{r4, r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	08009494 	.word	0x08009494
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	007a1200 	.word	0x007a1200
 8003fa4:	003d0900 	.word	0x003d0900

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b02      	ldr	r3, [pc, #8]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	20000000 	.word	0x20000000

08003fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fc0:	f7ff fff2 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0adb      	lsrs	r3, r3, #11
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	0800950c 	.word	0x0800950c

08003fe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <RCC_Delay+0x34>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <RCC_Delay+0x38>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0a5b      	lsrs	r3, r3, #9
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004000:	bf00      	nop
  }
  while (Delay --);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1e5a      	subs	r2, r3, #1
 8004006:	60fa      	str	r2, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f9      	bne.n	8004000 <RCC_Delay+0x1c>
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	20000000 	.word	0x20000000
 800401c:	10624dd3 	.word	0x10624dd3

08004020 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d07d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800403c:	2300      	movs	r3, #0
 800403e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004040:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4a4b      	ldr	r2, [pc, #300]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	61d3      	str	r3, [r2, #28]
 8004058:	4b49      	ldr	r3, [pc, #292]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b46      	ldr	r3, [pc, #280]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d118      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a42      	ldr	r2, [pc, #264]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004080:	f7fc fcf2 	bl	8000a68 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004088:	f7fc fcee 	bl	8000a68 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e06d      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	4b3a      	ldr	r3, [pc, #232]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02e      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d027      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c4:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040d4:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040da:	4a29      	ldr	r2, [pc, #164]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fc fcbd 	bl	8000a68 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fc fcb9 	bl	8000a68 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e036      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4917      	ldr	r1, [pc, #92]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	4313      	orrs	r3, r2
 8004124:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004136:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	490b      	ldr	r1, [pc, #44]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4904      	ldr	r1, [pc, #16]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	42420440 	.word	0x42420440

0800418c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b08d      	sub	sp, #52	; 0x34
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004194:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004196:	f107 040c 	add.w	r4, r7, #12
 800419a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800419c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041a0:	f240 2301 	movw	r3, #513	; 0x201
 80041a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	2300      	movs	r3, #0
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	2300      	movs	r3, #0
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	f200 808e 	bhi.w	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d049      	beq.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d079      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041d4:	e086      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80041d6:	4b49      	ldr	r3, [pc, #292]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80041dc:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d07f      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	0c9b      	lsrs	r3, r3, #18
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	3330      	adds	r3, #48	; 0x30
 80041f2:	443b      	add	r3, r7
 80041f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041f8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d017      	beq.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004204:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c5b      	lsrs	r3, r3, #17
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	3330      	adds	r3, #48	; 0x30
 8004210:	443b      	add	r3, r7
 8004212:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004222:	4a37      	ldr	r2, [pc, #220]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	fbb2 f2f3 	udiv	r2, r2, r3
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004232:	e004      	b.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	4a33      	ldr	r2, [pc, #204]	; (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800423e:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424a:	d102      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004250:	e04a      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004260:	e042      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004272:	d108      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
 8004284:	e01f      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004290:	d109      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800429e:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a4:	e00f      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b0:	d11c      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80042be:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042c4:	e012      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80042c6:	e011      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042c8:	f7ff fe78 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	0b9b      	lsrs	r3, r3, #14
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	3301      	adds	r3, #1
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042e2:	e004      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80042e4:	bf00      	nop
 80042e6:	e002      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80042e8:	bf00      	nop
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80042ec:	bf00      	nop
    }
  }
  return (frequency);
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3734      	adds	r7, #52	; 0x34
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	080094a4 	.word	0x080094a4
 80042fc:	40021000 	.word	0x40021000
 8004300:	007a1200 	.word	0x007a1200
 8004304:	003d0900 	.word	0x003d0900
 8004308:	aaaaaaab 	.word	0xaaaaaaab

0800430c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e041      	b.n	80043a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc faba 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f000 f93c 	bl	80045c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d001      	beq.n	80043c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIM_Base_Start+0x88>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_TIM_Base_Start+0x48>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d009      	beq.n	80043f4 <HAL_TIM_Base_Start+0x48>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <HAL_TIM_Base_Start+0x8c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIM_Base_Start+0x48>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_TIM_Base_Start+0x90>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d111      	bne.n	8004418 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b06      	cmp	r3, #6
 8004404:	d010      	beq.n	8004428 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	e007      	b.n	8004428 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800

08004440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIM_ConfigClockSource+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e0b3      	b.n	80045c0 <HAL_TIM_ConfigClockSource+0x180>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004490:	d03e      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xd0>
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	f200 8087 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	f000 8085 	beq.w	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d87f      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044a8:	2b70      	cmp	r3, #112	; 0x70
 80044aa:	d01a      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0xa2>
 80044ac:	2b70      	cmp	r3, #112	; 0x70
 80044ae:	d87b      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d050      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x116>
 80044b4:	2b60      	cmp	r3, #96	; 0x60
 80044b6:	d877      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044b8:	2b50      	cmp	r3, #80	; 0x50
 80044ba:	d03c      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0xf6>
 80044bc:	2b50      	cmp	r3, #80	; 0x50
 80044be:	d873      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d058      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x136>
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d86f      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d064      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x156>
 80044cc:	2b30      	cmp	r3, #48	; 0x30
 80044ce:	d86b      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d060      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x156>
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d867      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05c      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x156>
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d05a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044e0:	e062      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6899      	ldr	r1, [r3, #8]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f000 f942 	bl	800477a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004504:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e04e      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6899      	ldr	r1, [r3, #8]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f000 f92b 	bl	800477a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004532:	609a      	str	r2, [r3, #8]
      break;
 8004534:	e03b      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	461a      	mov	r2, r3
 8004544:	f000 f8a2 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2150      	movs	r1, #80	; 0x50
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f8f9 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004554:	e02b      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	461a      	mov	r2, r3
 8004564:	f000 f8c0 	bl	80046e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2160      	movs	r1, #96	; 0x60
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f8e9 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004574:	e01b      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	461a      	mov	r2, r3
 8004584:	f000 f882 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2140      	movs	r1, #64	; 0x40
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f8d9 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004594:	e00b      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f000 f8d0 	bl	8004746 <TIM_ITRx_SetConfig>
        break;
 80045a6:	e002      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a29      	ldr	r2, [pc, #164]	; (8004680 <TIM_Base_SetConfig+0xb8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x30>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x30>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a26      	ldr	r2, [pc, #152]	; (8004684 <TIM_Base_SetConfig+0xbc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x30>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a25      	ldr	r2, [pc, #148]	; (8004688 <TIM_Base_SetConfig+0xc0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <TIM_Base_SetConfig+0xb8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_Base_SetConfig+0x62>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d007      	beq.n	800462a <TIM_Base_SetConfig+0x62>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <TIM_Base_SetConfig+0xbc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_Base_SetConfig+0x62>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <TIM_Base_SetConfig+0xc0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <TIM_Base_SetConfig+0xb8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d103      	bne.n	8004670 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	615a      	str	r2, [r3, #20]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800

0800468c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 030a 	bic.w	r3, r3, #10
 80046c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0210 	bic.w	r2, r3, #16
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	031b      	lsls	r3, r3, #12
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	f043 0307 	orr.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477a:	b480      	push	{r7}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	021a      	lsls	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	431a      	orrs	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e046      	b.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d009      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a12      	ldr	r2, [pc, #72]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800

08004874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004874:	b084      	sub	sp, #16
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	f107 0014 	add.w	r0, r7, #20
 8004882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	b004      	add	sp, #16
 8004892:	4770      	bx	lr

08004894 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	b29b      	uxth	r3, r3
 80048de:	4013      	ands	r3, r2
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800490c:	b084      	sub	sp, #16
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	f107 0014 	add.w	r0, r7, #20
 800491a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	b004      	add	sp, #16
 800494a:	4770      	bx	lr

0800494c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800494c:	b480      	push	{r7}
 800494e:	b09b      	sub	sp, #108	; 0x6c
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	78db      	ldrb	r3, [r3, #3]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d81f      	bhi.n	80049be <USB_ActivateEndpoint+0x72>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <USB_ActivateEndpoint+0x38>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	08004995 	.word	0x08004995
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049c7 	.word	0x080049c7
 8004990:	080049a3 	.word	0x080049a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004994:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800499c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049a0:	e012      	b.n	80049c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80049aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049ae:	e00b      	b.n	80049c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049bc:	e004      	b.n	80049c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80049c4:	e000      	b.n	80049c8 <USB_ActivateEndpoint+0x7c>
      break;
 80049c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	7b1b      	ldrb	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8149 	bne.w	8004ccc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8084 	beq.w	8004b4c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4413      	add	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	011a      	lsls	r2, r3, #4
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	88db      	ldrh	r3, [r3, #6]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	81fb      	strh	r3, [r7, #14]
 8004a86:	89fb      	ldrh	r3, [r7, #14]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <USB_ActivateEndpoint+0x17c>
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	81bb      	strh	r3, [r7, #12]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	78db      	ldrb	r3, [r3, #3]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d020      	beq.n	8004b12 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae6:	813b      	strh	r3, [r7, #8]
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	f083 0320 	eor.w	r3, r3, #32
 8004aee:	813b      	strh	r3, [r7, #8]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	893b      	ldrh	r3, [r7, #8]
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]
 8004b10:	e27f      	b.n	8005012 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8013      	strh	r3, [r2, #0]
 8004b4a:	e262      	b.n	8005012 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	4413      	add	r3, r2
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	011a      	lsls	r2, r3, #4
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	88db      	ldrh	r3, [r3, #6]
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	4413      	add	r3, r2
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	011a      	lsls	r2, r3, #4
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d112      	bne.n	8004bd2 <USB_ActivateEndpoint+0x286>
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e02f      	b.n	8004c32 <USB_ActivateEndpoint+0x2e6>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd8:	d813      	bhi.n	8004c02 <USB_ActivateEndpoint+0x2b6>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	663b      	str	r3, [r7, #96]	; 0x60
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <USB_ActivateEndpoint+0x2a8>
 8004bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e017      	b.n	8004c32 <USB_ActivateEndpoint+0x2e6>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	663b      	str	r3, [r7, #96]	; 0x60
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <USB_ActivateEndpoint+0x2d0>
 8004c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	029b      	lsls	r3, r3, #10
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	83fb      	strh	r3, [r7, #30]
 8004c40:	8bfb      	ldrh	r3, [r7, #30]
 8004c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01b      	beq.n	8004c82 <USB_ActivateEndpoint+0x336>
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	83bb      	strh	r3, [r7, #28]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	8bbb      	ldrh	r3, [r7, #28]
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	837b      	strh	r3, [r7, #26]
 8004c9a:	8b7b      	ldrh	r3, [r7, #26]
 8004c9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ca0:	837b      	strh	r3, [r7, #26]
 8004ca2:	8b7b      	ldrh	r3, [r7, #26]
 8004ca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ca8:	837b      	strh	r3, [r7, #26]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]
 8004cca:	e1a2      	b.n	8005012 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d18:	4413      	add	r3, r2
 8004d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	011a      	lsls	r2, r3, #4
 8004d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	891b      	ldrh	r3, [r3, #8]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4c:	4413      	add	r3, r2
 8004d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	011a      	lsls	r2, r3, #4
 8004d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	895b      	ldrh	r3, [r3, #10]
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 8091 	bne.w	8004e9c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01b      	beq.n	8004dca <USB_ActivateEndpoint+0x47e>
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01b      	beq.n	8004e1a <USB_ActivateEndpoint+0x4ce>
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e78:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	8013      	strh	r3, [r2, #0]
 8004e9a:	e0ba      	b.n	8005012 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01d      	beq.n	8004ef4 <USB_ActivateEndpoint+0x5a8>
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01d      	beq.n	8004f4c <USB_ActivateEndpoint+0x600>
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	78db      	ldrb	r3, [r3, #3]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d024      	beq.n	8004f9e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f72:	f083 0320 	eor.w	r3, r3, #32
 8004f76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8013      	strh	r3, [r2, #0]
 8004f9c:	e01d      	b.n	8004fda <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005016:	4618      	mov	r0, r3
 8005018:	376c      	adds	r7, #108	; 0x6c
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005020:	b480      	push	{r7}
 8005022:	b08d      	sub	sp, #52	; 0x34
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	7b1b      	ldrb	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 808e 	bne.w	8005150 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d044      	beq.n	80050c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	81bb      	strh	r3, [r7, #12]
 800504a:	89bb      	ldrh	r3, [r7, #12]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_DeactivateEndpoint+0x6c>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	817b      	strh	r3, [r7, #10]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a2:	813b      	strh	r3, [r7, #8]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	893b      	ldrh	r3, [r7, #8]
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
 80050c4:	e192      	b.n	80053ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	827b      	strh	r3, [r7, #18]
 80050d4:	8a7b      	ldrh	r3, [r7, #18]
 80050d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01b      	beq.n	8005116 <USB_DeactivateEndpoint+0xf6>
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	823b      	strh	r3, [r7, #16]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	8a3b      	ldrh	r3, [r7, #16]
 8005102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	81fb      	strh	r3, [r7, #14]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
 800514e:	e14d      	b.n	80053ec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 80a5 	bne.w	80052a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	843b      	strh	r3, [r7, #32]
 8005168:	8c3b      	ldrh	r3, [r7, #32]
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01b      	beq.n	80051aa <USB_DeactivateEndpoint+0x18a>
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	83fb      	strh	r3, [r7, #30]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	8bfb      	ldrh	r3, [r7, #30]
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	83bb      	strh	r3, [r7, #28]
 80051b8:	8bbb      	ldrh	r3, [r7, #28]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01b      	beq.n	80051fa <USB_DeactivateEndpoint+0x1da>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	837b      	strh	r3, [r7, #26]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8b7b      	ldrh	r3, [r7, #26]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	833b      	strh	r3, [r7, #24]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8b3b      	ldrh	r3, [r7, #24]
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	82fb      	strh	r3, [r7, #22]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005280:	82bb      	strh	r3, [r7, #20]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	8abb      	ldrh	r3, [r7, #20]
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
 80052a2:	e0a3      	b.n	80053ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80052b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <USB_DeactivateEndpoint+0x2d4>
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <USB_DeactivateEndpoint+0x324>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	853b      	strh	r3, [r7, #40]	; 0x28
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005392:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3734      	adds	r7, #52	; 0x34
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b0cc      	sub	sp, #304	; 0x130
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005406:	6018      	str	r0, [r3, #0]
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005410:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b01      	cmp	r3, #1
 8005420:	f041 817d 	bne.w	800671e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d908      	bls.n	8005452 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005450:	e007      	b.n	8005462 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	7b1b      	ldrb	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d152      	bne.n	8005518 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6959      	ldr	r1, [r3, #20]
 800547e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	88da      	ldrh	r2, [r3, #6]
 800548a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548e:	b29b      	uxth	r3, r3
 8005490:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005494:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005498:	6800      	ldr	r0, [r0, #0]
 800549a:	f001 ff23 	bl	80072e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	4619      	mov	r1, r3
 80054c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054d0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	440a      	add	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	011a      	lsls	r2, r3, #4
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005506:	b29a      	uxth	r2, r3
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	f001 b8b5 	b.w	8006682 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	78db      	ldrb	r3, [r3, #3]
 8005524:	2b02      	cmp	r3, #2
 8005526:	f040 84c6 	bne.w	8005eb6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a1a      	ldr	r2, [r3, #32]
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	f240 8443 	bls.w	8005dce <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005598:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800559c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80055a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 823e 	beq.w	8005a66 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 809a 	bne.w	8005744 <USB_EPStartXfer+0x34c>
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005618:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800561c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005632:	b29b      	uxth	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800563e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005642:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	440a      	add	r2, r1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	011a      	lsls	r2, r3, #4
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4413      	add	r3, r2
 8005666:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d122      	bne.n	80056c2 <USB_EPStartXfer+0x2ca>
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800568e:	b29a      	uxth	r2, r3
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	e079      	b.n	80057b6 <USB_EPStartXfer+0x3be>
 80056c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c6:	2b3e      	cmp	r3, #62	; 0x3e
 80056c8:	d81b      	bhi.n	8005702 <USB_EPStartXfer+0x30a>
 80056ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <USB_EPStartXfer+0x2f2>
 80056e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056e4:	3301      	adds	r3, #1
 80056e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	029b      	lsls	r3, r3, #10
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	e059      	b.n	80057b6 <USB_EPStartXfer+0x3be>
 8005702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800570c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <USB_EPStartXfer+0x32a>
 8005718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800571c:	3b01      	subs	r3, #1
 800571e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005726:	b29b      	uxth	r3, r3
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	b29b      	uxth	r3, r3
 800572c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005734:	b29a      	uxth	r2, r3
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e038      	b.n	80057b6 <USB_EPStartXfer+0x3be>
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d130      	bne.n	80057b6 <USB_EPStartXfer+0x3be>
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800576e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005772:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	440a      	add	r2, r1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4413      	add	r3, r2
 8005796:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	895b      	ldrh	r3, [r3, #10]
 80057c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6959      	ldr	r1, [r3, #20]
 80057d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f001 fd7d 	bl	80072e4 <USB_WritePMA>
            ep->xfer_buff += len;
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fa:	441a      	add	r2, r3
 80057fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d90f      	bls.n	8005844 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a1a      	ldr	r2, [r3, #32]
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	1ad2      	subs	r2, r2, r3
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	621a      	str	r2, [r3, #32]
 8005842:	e00e      	b.n	8005862 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 809a 	bne.w	80059a8 <USB_EPStartXfer+0x5b0>
 8005874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005878:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800587c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005880:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	4619      	mov	r1, r3
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058a6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	440a      	add	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	011a      	lsls	r2, r3, #4
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d122      	bne.n	8005926 <USB_EPStartXfer+0x52e>
 80058e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005916:	b29a      	uxth	r2, r3
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e083      	b.n	8005a2e <USB_EPStartXfer+0x636>
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	2b3e      	cmp	r3, #62	; 0x3e
 800592c:	d81b      	bhi.n	8005966 <USB_EPStartXfer+0x56e>
 800592e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <USB_EPStartXfer+0x556>
 8005944:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005948:	3301      	adds	r3, #1
 800594a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800594e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005952:	b29b      	uxth	r3, r3
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	b29a      	uxth	r2, r3
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	e063      	b.n	8005a2e <USB_EPStartXfer+0x636>
 8005966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <USB_EPStartXfer+0x58e>
 800597c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005980:	3b01      	subs	r3, #1
 8005982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005986:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800598a:	b29b      	uxth	r3, r3
 800598c:	029b      	lsls	r3, r3, #10
 800598e:	b29b      	uxth	r3, r3
 8005990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005998:	b29a      	uxth	r2, r3
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	e042      	b.n	8005a2e <USB_EPStartXfer+0x636>
 80059a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d13a      	bne.n	8005a2e <USB_EPStartXfer+0x636>
 80059b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4619      	mov	r1, r3
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	440a      	add	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	891b      	ldrh	r3, [r3, #8]
 8005a3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6959      	ldr	r1, [r3, #20]
 8005a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a5c:	6800      	ldr	r0, [r0, #0]
 8005a5e:	f001 fc41 	bl	80072e4 <USB_WritePMA>
 8005a62:	f000 be0e 	b.w	8006682 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d16d      	bne.n	8005b52 <USB_EPStartXfer+0x75a>
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a96:	4413      	add	r3, r2
 8005a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	011a      	lsls	r2, r3, #4
 8005aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aaa:	4413      	add	r3, r2
 8005aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d112      	bne.n	8005ae0 <USB_EPStartXfer+0x6e8>
 8005aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e063      	b.n	8005ba8 <USB_EPStartXfer+0x7b0>
 8005ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae6:	d817      	bhi.n	8005b18 <USB_EPStartXfer+0x720>
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <USB_EPStartXfer+0x710>
 8005afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b02:	3301      	adds	r3, #1
 8005b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	029b      	lsls	r3, r3, #10
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e047      	b.n	8005ba8 <USB_EPStartXfer+0x7b0>
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <USB_EPStartXfer+0x740>
 8005b2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b32:	3b01      	subs	r3, #1
 8005b34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e02a      	b.n	8005ba8 <USB_EPStartXfer+0x7b0>
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d122      	bne.n	8005ba8 <USB_EPStartXfer+0x7b0>
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b82:	4413      	add	r3, r2
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	891b      	ldrh	r3, [r3, #8]
 8005bb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6959      	ldr	r1, [r3, #20]
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bd2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	f001 fb84 	bl	80072e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bec:	441a      	add	r2, r3
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6a1a      	ldr	r2, [r3, #32]
 8005c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90f      	bls.n	8005c36 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	621a      	str	r2, [r3, #32]
 8005c34:	e00e      	b.n	8005c54 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2200      	movs	r2, #0
 8005c52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d16d      	bne.n	8005d4c <USB_EPStartXfer+0x954>
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	4413      	add	r3, r2
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
 8005cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d112      	bne.n	8005cda <USB_EPStartXfer+0x8e2>
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e05d      	b.n	8005d96 <USB_EPStartXfer+0x99e>
 8005cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cde:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce0:	d817      	bhi.n	8005d12 <USB_EPStartXfer+0x91a>
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USB_EPStartXfer+0x90a>
 8005cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e041      	b.n	8005d96 <USB_EPStartXfer+0x99e>
 8005d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <USB_EPStartXfer+0x93a>
 8005d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e024      	b.n	8005d96 <USB_EPStartXfer+0x99e>
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d11c      	bne.n	8005d96 <USB_EPStartXfer+0x99e>
 8005d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	4413      	add	r3, r2
 8005d72:	643b      	str	r3, [r7, #64]	; 0x40
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d84:	4413      	add	r3, r2
 8005d86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	895b      	ldrh	r3, [r3, #10]
 8005da2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6959      	ldr	r1, [r3, #20]
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dbc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dc0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dc4:	6800      	ldr	r0, [r0, #0]
 8005dc6:	f001 fa8d 	bl	80072e4 <USB_WritePMA>
 8005dca:	f000 bc5a 	b.w	8006682 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5a:	4413      	add	r3, r2
 8005e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	011a      	lsls	r2, r3, #4
 8005e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6e:	4413      	add	r3, r2
 8005e70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	891b      	ldrh	r3, [r3, #8]
 8005e8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6959      	ldr	r1, [r3, #20]
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ea6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005eaa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005eae:	6800      	ldr	r0, [r0, #0]
 8005eb0:	f001 fa18 	bl	80072e4 <USB_WritePMA>
 8005eb4:	e3e5      	b.n	8006682 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 81bc 	beq.w	80062d0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d16d      	bne.n	8006052 <USB_EPStartXfer+0xc5a>
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f96:	4413      	add	r3, r2
 8005f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	011a      	lsls	r2, r3, #4
 8005fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb0:	677b      	str	r3, [r7, #116]	; 0x74
 8005fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d112      	bne.n	8005fe0 <USB_EPStartXfer+0xbe8>
 8005fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e060      	b.n	80060a2 <USB_EPStartXfer+0xcaa>
 8005fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe6:	d817      	bhi.n	8006018 <USB_EPStartXfer+0xc20>
 8005fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <USB_EPStartXfer+0xc10>
 8005ffe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006002:	3301      	adds	r3, #1
 8006004:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006008:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800600c:	b29b      	uxth	r3, r3
 800600e:	029b      	lsls	r3, r3, #10
 8006010:	b29a      	uxth	r2, r3
 8006012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e044      	b.n	80060a2 <USB_EPStartXfer+0xcaa>
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <USB_EPStartXfer+0xc40>
 800602e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006032:	3b01      	subs	r3, #1
 8006034:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800603c:	b29b      	uxth	r3, r3
 800603e:	029b      	lsls	r3, r3, #10
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e027      	b.n	80060a2 <USB_EPStartXfer+0xcaa>
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d11f      	bne.n	80060a2 <USB_EPStartXfer+0xcaa>
 8006062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006078:	4413      	add	r3, r2
 800607a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800607e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	011a      	lsls	r2, r3, #4
 800608c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006090:	4413      	add	r3, r2
 8006092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006096:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	b29a      	uxth	r2, r3
 800609e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	895b      	ldrh	r3, [r3, #10]
 80060ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6959      	ldr	r1, [r3, #20]
 80060be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060d0:	6800      	ldr	r0, [r0, #0]
 80060d2:	f001 f907 	bl	80072e4 <USB_WritePMA>
          ep->xfer_buff += len;
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e6:	441a      	add	r2, r3
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d90f      	bls.n	8006130 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	621a      	str	r2, [r3, #32]
 800612e:	e00e      	b.n	800614e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800614e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8295 	beq.w	8006682 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d16d      	bne.n	8006244 <USB_EPStartXfer+0xe4c>
 8006168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	66bb      	str	r3, [r7, #104]	; 0x68
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006188:	4413      	add	r3, r2
 800618a:	66bb      	str	r3, [r7, #104]	; 0x68
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	011a      	lsls	r2, r3, #4
 800619a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800619c:	4413      	add	r3, r2
 800619e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061a2:	667b      	str	r3, [r7, #100]	; 0x64
 80061a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d112      	bne.n	80061d2 <USB_EPStartXfer+0xdda>
 80061ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e063      	b.n	800629a <USB_EPStartXfer+0xea2>
 80061d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d6:	2b3e      	cmp	r3, #62	; 0x3e
 80061d8:	d817      	bhi.n	800620a <USB_EPStartXfer+0xe12>
 80061da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <USB_EPStartXfer+0xe02>
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f4:	3301      	adds	r3, #1
 80061f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fe:	b29b      	uxth	r3, r3
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	b29a      	uxth	r2, r3
 8006204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e047      	b.n	800629a <USB_EPStartXfer+0xea2>
 800620a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <USB_EPStartXfer+0xe32>
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006224:	3b01      	subs	r3, #1
 8006226:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	b29b      	uxth	r3, r3
 8006230:	029b      	lsls	r3, r3, #10
 8006232:	b29b      	uxth	r3, r3
 8006234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623c:	b29a      	uxth	r2, r3
 800623e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e02a      	b.n	800629a <USB_EPStartXfer+0xea2>
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d122      	bne.n	800629a <USB_EPStartXfer+0xea2>
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	673b      	str	r3, [r7, #112]	; 0x70
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006274:	4413      	add	r3, r2
 8006276:	673b      	str	r3, [r7, #112]	; 0x70
 8006278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	011a      	lsls	r2, r3, #4
 8006286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006288:	4413      	add	r3, r2
 800628a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800628e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006294:	b29a      	uxth	r2, r3
 8006296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006298:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800629a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	891b      	ldrh	r3, [r3, #8]
 80062a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6959      	ldr	r1, [r3, #20]
 80062b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062c8:	6800      	ldr	r0, [r0, #0]
 80062ca:	f001 f80b 	bl	80072e4 <USB_WritePMA>
 80062ce:	e1d8      	b.n	8006682 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d178      	bne.n	80063d2 <USB_EPStartXfer+0xfda>
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006304:	4413      	add	r3, r2
 8006306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	011a      	lsls	r2, r3, #4
 8006318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800631c:	4413      	add	r3, r2
 800631e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d116      	bne.n	800635c <USB_EPStartXfer+0xf64>
 800632e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	e06b      	b.n	8006434 <USB_EPStartXfer+0x103c>
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	2b3e      	cmp	r3, #62	; 0x3e
 8006362:	d818      	bhi.n	8006396 <USB_EPStartXfer+0xf9e>
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <USB_EPStartXfer+0xf8c>
 800637a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800637e:	3301      	adds	r3, #1
 8006380:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006384:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006388:	b29b      	uxth	r3, r3
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e04e      	b.n	8006434 <USB_EPStartXfer+0x103c>
 8006396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80063a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <USB_EPStartXfer+0xfbe>
 80063ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063b0:	3b01      	subs	r3, #1
 80063b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80063b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	029b      	lsls	r3, r3, #10
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	e030      	b.n	8006434 <USB_EPStartXfer+0x103c>
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d128      	bne.n	8006434 <USB_EPStartXfer+0x103c>
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006406:	4413      	add	r3, r2
 8006408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800641e:	4413      	add	r3, r2
 8006420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006432:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	891b      	ldrh	r3, [r3, #8]
 8006440:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6959      	ldr	r1, [r3, #20]
 8006450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006454:	b29b      	uxth	r3, r3
 8006456:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800645a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800645e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	f000 ff3e 	bl	80072e4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	441a      	add	r2, r3
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d90f      	bls.n	80064c2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80064a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6a1a      	ldr	r2, [r3, #32]
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	621a      	str	r2, [r3, #32]
 80064c0:	e00e      	b.n	80064e0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80064c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80064d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2200      	movs	r2, #0
 80064de:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80064e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80cc 	beq.w	8006682 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d178      	bne.n	80065fa <USB_EPStartXfer+0x1202>
 8006508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006524:	b29b      	uxth	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800652c:	4413      	add	r3, r2
 800652e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	011a      	lsls	r2, r3, #4
 8006540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006544:	4413      	add	r3, r2
 8006546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800654a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800654e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d116      	bne.n	8006584 <USB_EPStartXfer+0x118c>
 8006556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e064      	b.n	800664e <USB_EPStartXfer+0x1256>
 8006584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006588:	2b3e      	cmp	r3, #62	; 0x3e
 800658a:	d818      	bhi.n	80065be <USB_EPStartXfer+0x11c6>
 800658c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <USB_EPStartXfer+0x11b4>
 80065a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a6:	3301      	adds	r3, #1
 80065a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	029b      	lsls	r3, r3, #10
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e047      	b.n	800664e <USB_EPStartXfer+0x1256>
 80065be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <USB_EPStartXfer+0x11e6>
 80065d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d8:	3b01      	subs	r3, #1
 80065da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e029      	b.n	800664e <USB_EPStartXfer+0x1256>
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d121      	bne.n	800664e <USB_EPStartXfer+0x1256>
 800660a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006620:	4413      	add	r3, r2
 8006622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	011a      	lsls	r2, r3, #4
 8006634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006638:	4413      	add	r3, r2
 800663a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800663e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800664c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	895b      	ldrh	r3, [r3, #10]
 800665a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6959      	ldr	r1, [r3, #20]
 800666a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666e:	b29b      	uxth	r3, r3
 8006670:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006674:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006678:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f000 fe31 	bl	80072e4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066a4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b0:	8013      	strh	r3, [r2, #0]
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80066ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066be:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80066c2:	8812      	ldrh	r2, [r2, #0]
 80066c4:	f082 0210 	eor.w	r2, r2, #16
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80066d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066d6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80066da:	8812      	ldrh	r2, [r2, #0]
 80066dc:	f082 0220 	eor.w	r2, r2, #32
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]
 800671a:	f000 bc9f 	b.w	800705c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	7b1b      	ldrb	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 80ae 	bne.w	800688c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699a      	ldr	r2, [r3, #24]
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d917      	bls.n	800677c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800674c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800675c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699a      	ldr	r2, [r3, #24]
 8006768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	619a      	str	r2, [r3, #24]
 800677a:	e00e      	b.n	800679a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800677c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800678c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067be:	4413      	add	r3, r2
 80067c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	011a      	lsls	r2, r3, #4
 80067d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067d6:	4413      	add	r3, r2
 80067d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d116      	bne.n	8006816 <USB_EPStartXfer+0x141e>
 80067e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e3e8      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
 8006816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681a:	2b3e      	cmp	r3, #62	; 0x3e
 800681c:	d818      	bhi.n	8006850 <USB_EPStartXfer+0x1458>
 800681e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <USB_EPStartXfer+0x1446>
 8006834:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006838:	3301      	adds	r3, #1
 800683a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800683e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006842:	b29b      	uxth	r3, r3
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	e3cb      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
 8006850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800685a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <USB_EPStartXfer+0x1478>
 8006866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800686a:	3b01      	subs	r3, #1
 800686c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006870:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	e3ad      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800688c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	78db      	ldrb	r3, [r3, #3]
 8006898:	2b02      	cmp	r3, #2
 800689a:	f040 8200 	bne.w	8006c9e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8091 	bne.w	80069d2 <USB_EPStartXfer+0x15da>
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068d4:	4413      	add	r3, r2
 80068d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	011a      	lsls	r2, r3, #4
 80068e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d116      	bne.n	8006934 <USB_EPStartXfer+0x153c>
 8006906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006912:	b29a      	uxth	r2, r3
 8006914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692a:	b29a      	uxth	r2, r3
 800692c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e083      	b.n	8006a3c <USB_EPStartXfer+0x1644>
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b3e      	cmp	r3, #62	; 0x3e
 8006942:	d820      	bhi.n	8006986 <USB_EPStartXfer+0x158e>
 8006944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <USB_EPStartXfer+0x157c>
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696e:	3301      	adds	r3, #1
 8006970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	b29b      	uxth	r3, r3
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	b29a      	uxth	r2, r3
 800697e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	e05a      	b.n	8006a3c <USB_EPStartXfer+0x1644>
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <USB_EPStartXfer+0x15be>
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	3b01      	subs	r3, #1
 80069b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	029b      	lsls	r3, r3, #10
 80069be:	b29b      	uxth	r3, r3
 80069c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	e034      	b.n	8006a3c <USB_EPStartXfer+0x1644>
 80069d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d12c      	bne.n	8006a3c <USB_EPStartXfer+0x1644>
 80069e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a06:	4413      	add	r3, r2
 8006a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	011a      	lsls	r2, r3, #4
 8006a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a1e:	4413      	add	r3, r2
 8006a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f040 8091 	bne.w	8006b7e <USB_EPStartXfer+0x1786>
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a80:	4413      	add	r3, r2
 8006a82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	011a      	lsls	r2, r3, #4
 8006a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d116      	bne.n	8006ae0 <USB_EPStartXfer+0x16e8>
 8006ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	e07c      	b.n	8006bda <USB_EPStartXfer+0x17e2>
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b3e      	cmp	r3, #62	; 0x3e
 8006aee:	d820      	bhi.n	8006b32 <USB_EPStartXfer+0x173a>
 8006af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USB_EPStartXfer+0x1728>
 8006b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e053      	b.n	8006bda <USB_EPStartXfer+0x17e2>
 8006b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <USB_EPStartXfer+0x176a>
 8006b58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	029b      	lsls	r3, r3, #10
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	e02d      	b.n	8006bda <USB_EPStartXfer+0x17e2>
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d125      	bne.n	8006bda <USB_EPStartXfer+0x17e2>
 8006b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	011a      	lsls	r2, r3, #4
 8006bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bd8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 81fe 	beq.w	8006fe8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c0c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <USB_EPStartXfer+0x182c>
 8006c18:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10d      	bne.n	8006c40 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c24:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 81db 	bne.w	8006fe8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c32:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 81d4 	bne.w	8006fe8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	441a      	add	r2, r3
 8006c84:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]
 8006c9c:	e1a4      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	78db      	ldrb	r3, [r3, #3]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	f040 819a 	bne.w	8006fe4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d917      	bls.n	8006cfc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	619a      	str	r2, [r3, #24]
 8006cfa:	e00e      	b.n	8006d1a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d178      	bne.n	8006e1c <USB_EPStartXfer+0x1a24>
 8006d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d4e:	4413      	add	r3, r2
 8006d50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	011a      	lsls	r2, r3, #4
 8006d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d116      	bne.n	8006da6 <USB_EPStartXfer+0x19ae>
 8006d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	e06b      	b.n	8006e7e <USB_EPStartXfer+0x1a86>
 8006da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006daa:	2b3e      	cmp	r3, #62	; 0x3e
 8006dac:	d818      	bhi.n	8006de0 <USB_EPStartXfer+0x19e8>
 8006dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <USB_EPStartXfer+0x19d6>
 8006dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc8:	3301      	adds	r3, #1
 8006dca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	029b      	lsls	r3, r3, #10
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	e04e      	b.n	8006e7e <USB_EPStartXfer+0x1a86>
 8006de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <USB_EPStartXfer+0x1a08>
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	e030      	b.n	8006e7e <USB_EPStartXfer+0x1a86>
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d128      	bne.n	8006e7e <USB_EPStartXfer+0x1a86>
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e50:	4413      	add	r3, r2
 8006e52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	011a      	lsls	r2, r3, #4
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d178      	bne.n	8006f8e <USB_EPStartXfer+0x1b96>
 8006e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	011a      	lsls	r2, r3, #4
 8006ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d116      	bne.n	8006f18 <USB_EPStartXfer+0x1b20>
 8006eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	e067      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f1e:	d818      	bhi.n	8006f52 <USB_EPStartXfer+0x1b5a>
 8006f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <USB_EPStartXfer+0x1b48>
 8006f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	029b      	lsls	r3, r3, #10
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4e:	801a      	strh	r2, [r3, #0]
 8006f50:	e04a      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <USB_EPStartXfer+0x1b7a>
 8006f68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e02c      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d124      	bne.n	8006fe8 <USB_EPStartXfer+0x1bf0>
 8006f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	4413      	add	r3, r2
 8006fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	e001      	b.n	8006fe8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e03a      	b.n	800705e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007012:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800701a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800701e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007022:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007026:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007058:	b29b      	uxth	r3, r3
 800705a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d020      	beq.n	80070bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007090:	81bb      	strh	r3, [r7, #12]
 8007092:	89bb      	ldrh	r3, [r7, #12]
 8007094:	f083 0310 	eor.w	r3, r3, #16
 8007098:	81bb      	strh	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	441a      	add	r2, r3
 80070a4:	89bb      	ldrh	r3, [r7, #12]
 80070a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	8013      	strh	r3, [r2, #0]
 80070ba:	e01f      	b.n	80070fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	81fb      	strh	r3, [r7, #14]
 80070d4:	89fb      	ldrh	r3, [r7, #14]
 80070d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070da:	81fb      	strh	r3, [r7, #14]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	89fb      	ldrh	r3, [r7, #14]
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	7b1b      	ldrb	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 809d 	bne.w	8007256 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d04c      	beq.n	80071be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	823b      	strh	r3, [r7, #16]
 8007132:	8a3b      	ldrh	r3, [r7, #16]
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <USB_EPClearStall+0x6c>
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007152:	81fb      	strh	r3, [r7, #14]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	89fb      	ldrh	r3, [r7, #14]
 8007160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007170:	b29b      	uxth	r3, r3
 8007172:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	78db      	ldrb	r3, [r3, #3]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d06c      	beq.n	8007256 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007192:	81bb      	strh	r3, [r7, #12]
 8007194:	89bb      	ldrh	r3, [r7, #12]
 8007196:	f083 0320 	eor.w	r3, r3, #32
 800719a:	81bb      	strh	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	441a      	add	r2, r3
 80071a6:	89bb      	ldrh	r3, [r7, #12]
 80071a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	8013      	strh	r3, [r2, #0]
 80071bc:	e04b      	b.n	8007256 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	82fb      	strh	r3, [r7, #22]
 80071cc:	8afb      	ldrh	r3, [r7, #22]
 80071ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01b      	beq.n	800720e <USB_EPClearStall+0x106>
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	82bb      	strh	r3, [r7, #20]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	8abb      	ldrh	r3, [r7, #20]
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	827b      	strh	r3, [r7, #18]
 8007226:	8a7b      	ldrh	r3, [r7, #18]
 8007228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800722c:	827b      	strh	r3, [r7, #18]
 800722e:	8a7b      	ldrh	r3, [r7, #18]
 8007230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007234:	827b      	strh	r3, [r7, #18]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	441a      	add	r2, r3
 8007240:	8a7b      	ldrh	r3, [r7, #18]
 8007242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800724a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007252:	b29b      	uxth	r3, r3
 8007254:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072be:	b29b      	uxth	r3, r3
 80072c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072c2:	68fb      	ldr	r3, [r7, #12]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b08d      	sub	sp, #52	; 0x34
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	460b      	mov	r3, r1
 80072f4:	80fb      	strh	r3, [r7, #6]
 80072f6:	4613      	mov	r3, r2
 80072f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072fa:	88bb      	ldrh	r3, [r7, #4]
 80072fc:	3301      	adds	r3, #1
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	005a      	lsls	r2, r3, #1
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731c:	e01e      	b.n	800735c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	3301      	adds	r3, #1
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	b29a      	uxth	r2, r3
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	3302      	adds	r3, #2
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	3302      	adds	r3, #2
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	3301      	adds	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	3b01      	subs	r3, #1
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1dd      	bne.n	800731e <USB_WritePMA+0x3a>
  }
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	3734      	adds	r7, #52	; 0x34
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr

0800736e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800736e:	b480      	push	{r7}
 8007370:	b08b      	sub	sp, #44	; 0x2c
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	4611      	mov	r1, r2
 800737a:	461a      	mov	r2, r3
 800737c:	460b      	mov	r3, r1
 800737e:	80fb      	strh	r3, [r7, #6]
 8007380:	4613      	mov	r3, r2
 8007382:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007384:	88bb      	ldrh	r3, [r7, #4]
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	b29b      	uxth	r3, r3
 800738a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	005a      	lsls	r2, r3, #1
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	e01b      	b.n	80073e0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	3302      	adds	r3, #2
 80073b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	3301      	adds	r3, #1
 80073c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	3301      	adds	r3, #1
 80073d2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	3302      	adds	r3, #2
 80073d8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	3b01      	subs	r3, #1
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e0      	bne.n	80073a8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80073e6:	88bb      	ldrh	r3, [r7, #4]
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	701a      	strb	r2, [r3, #0]
  }
}
 8007402:	bf00      	nop
 8007404:	372c      	adds	r7, #44	; 0x2c
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7c1b      	ldrb	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d115      	bne.n	8007450 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007428:	2202      	movs	r2, #2
 800742a:	2181      	movs	r1, #129	; 0x81
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fe86 	bl	800913e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743c:	2202      	movs	r2, #2
 800743e:	2101      	movs	r1, #1
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fe7c 	bl	800913e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800744e:	e012      	b.n	8007476 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	2202      	movs	r2, #2
 8007454:	2181      	movs	r1, #129	; 0x81
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 fe71 	bl	800913e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007462:	2340      	movs	r3, #64	; 0x40
 8007464:	2202      	movs	r2, #2
 8007466:	2101      	movs	r1, #1
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 fe68 	bl	800913e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007476:	2308      	movs	r3, #8
 8007478:	2203      	movs	r2, #3
 800747a:	2182      	movs	r1, #130	; 0x82
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fe5e 	bl	800913e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007488:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800748c:	f001 ff7e 	bl	800938c <USBD_static_malloc>
 8007490:	4602      	mov	r2, r0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e026      	b.n	80074f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	7c1b      	ldrb	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074dc:	2101      	movs	r1, #1
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 ff1e 	bl	8009320 <USBD_LL_PrepareReceive>
 80074e4:	e007      	b.n	80074f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ec:	2340      	movs	r3, #64	; 0x40
 80074ee:	2101      	movs	r1, #1
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 ff15 	bl	8009320 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007510:	2181      	movs	r1, #129	; 0x81
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fe39 	bl	800918a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fe32 	bl	800918a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800752e:	2182      	movs	r1, #130	; 0x82
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fe2a 	bl	800918a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00e      	beq.n	8007564 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007556:	4618      	mov	r0, r3
 8007558:	f001 ff24 	bl	80093a4 <USBD_static_free>
    pdev->pClassData = NULL;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b086      	sub	sp, #24
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007594:	2b00      	cmp	r3, #0
 8007596:	d039      	beq.n	800760c <USBD_CDC_Setup+0x9e>
 8007598:	2b20      	cmp	r3, #32
 800759a:	d17f      	bne.n	800769c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	88db      	ldrh	r3, [r3, #6]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d029      	beq.n	80075f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da11      	bge.n	80075d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80075ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	88d2      	ldrh	r2, [r2, #6]
 80075c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075c2:	6939      	ldr	r1, [r7, #16]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	88db      	ldrh	r3, [r3, #6]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fa09 	bl	80089e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80075d0:	e06b      	b.n	80076aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	785a      	ldrb	r2, [r3, #1]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	88db      	ldrh	r3, [r3, #6]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075e8:	6939      	ldr	r1, [r7, #16]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	88db      	ldrh	r3, [r3, #6]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fa24 	bl	8008a3e <USBD_CtlPrepareRx>
      break;
 80075f6:	e058      	b.n	80076aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	7850      	ldrb	r0, [r2, #1]
 8007604:	2200      	movs	r2, #0
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	4798      	blx	r3
      break;
 800760a:	e04e      	b.n	80076aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b0b      	cmp	r3, #11
 8007612:	d02e      	beq.n	8007672 <USBD_CDC_Setup+0x104>
 8007614:	2b0b      	cmp	r3, #11
 8007616:	dc38      	bgt.n	800768a <USBD_CDC_Setup+0x11c>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <USBD_CDC_Setup+0xb4>
 800761c:	2b0a      	cmp	r3, #10
 800761e:	d014      	beq.n	800764a <USBD_CDC_Setup+0xdc>
 8007620:	e033      	b.n	800768a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007628:	2b03      	cmp	r3, #3
 800762a:	d107      	bne.n	800763c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f9d4 	bl	80089e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800763a:	e02e      	b.n	800769a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f965 	bl	800890e <USBD_CtlError>
            ret = USBD_FAIL;
 8007644:	2302      	movs	r3, #2
 8007646:	75fb      	strb	r3, [r7, #23]
          break;
 8007648:	e027      	b.n	800769a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007650:	2b03      	cmp	r3, #3
 8007652:	d107      	bne.n	8007664 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007654:	f107 030f 	add.w	r3, r7, #15
 8007658:	2201      	movs	r2, #1
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f9c0 	bl	80089e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007662:	e01a      	b.n	800769a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f951 	bl	800890e <USBD_CtlError>
            ret = USBD_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	75fb      	strb	r3, [r7, #23]
          break;
 8007670:	e013      	b.n	800769a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007678:	2b03      	cmp	r3, #3
 800767a:	d00d      	beq.n	8007698 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f945 	bl	800890e <USBD_CtlError>
            ret = USBD_FAIL;
 8007684:	2302      	movs	r3, #2
 8007686:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007688:	e006      	b.n	8007698 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f93e 	bl	800890e <USBD_CtlError>
          ret = USBD_FAIL;
 8007692:	2302      	movs	r3, #2
 8007694:	75fb      	strb	r3, [r7, #23]
          break;
 8007696:	e000      	b.n	800769a <USBD_CDC_Setup+0x12c>
          break;
 8007698:	bf00      	nop
      }
      break;
 800769a:	e006      	b.n	80076aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f935 	bl	800890e <USBD_CtlError>
      ret = USBD_FAIL;
 80076a4:	2302      	movs	r3, #2
 80076a6:	75fb      	strb	r3, [r7, #23]
      break;
 80076a8:	bf00      	nop
  }

  return ret;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d03a      	beq.n	8007750 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076da:	78fa      	ldrb	r2, [r7, #3]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	331c      	adds	r3, #28
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d029      	beq.n	8007744 <USBD_CDC_DataIn+0x90>
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	331c      	adds	r3, #28
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	78f9      	ldrb	r1, [r7, #3]
 8007704:	68b8      	ldr	r0, [r7, #8]
 8007706:	460b      	mov	r3, r1
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4403      	add	r3, r0
 8007710:	3338      	adds	r3, #56	; 0x38
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	fbb2 f1f3 	udiv	r1, r2, r3
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d110      	bne.n	8007744 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	331c      	adds	r3, #28
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007736:	78f9      	ldrb	r1, [r7, #3]
 8007738:	2300      	movs	r3, #0
 800773a:	2200      	movs	r2, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fdcc 	bl	80092da <USBD_LL_Transmit>
 8007742:	e003      	b.n	800774c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	e000      	b.n	8007752 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007750:	2302      	movs	r3, #2
  }
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fdf7 	bl	8009366 <USBD_LL_GetRxDataSize>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800779e:	4611      	mov	r1, r2
 80077a0:	4798      	blx	r3

    return USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e000      	b.n	80077a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80077a6:	2302      	movs	r3, #2
  }
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d015      	beq.n	80077f6 <USBD_CDC_EP0_RxReady+0x46>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077d0:	2bff      	cmp	r3, #255	; 0xff
 80077d2:	d010      	beq.n	80077f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80077e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077ea:	b292      	uxth	r2, r2
 80077ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	22ff      	movs	r2, #255	; 0xff
 80077f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2243      	movs	r2, #67	; 0x43
 800780c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800780e:	4b03      	ldr	r3, [pc, #12]	; (800781c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	20000094 	.word	0x20000094

08007820 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2243      	movs	r2, #67	; 0x43
 800782c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800782e:	4b03      	ldr	r3, [pc, #12]	; (800783c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000050 	.word	0x20000050

08007840 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2243      	movs	r2, #67	; 0x43
 800784c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800784e:	4b03      	ldr	r3, [pc, #12]	; (800785c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	200000d8 	.word	0x200000d8

08007860 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	220a      	movs	r2, #10
 800786c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800786e:	4b03      	ldr	r3, [pc, #12]	; (800787c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	2000000c 	.word	0x2000000c

08007880 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800788a:	2302      	movs	r3, #2
 800788c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr

080078de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01c      	beq.n	8007958 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007924:	2b00      	cmp	r3, #0
 8007926:	d115      	bne.n	8007954 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007946:	b29b      	uxth	r3, r3
 8007948:	2181      	movs	r1, #129	; 0x81
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fcc5 	bl	80092da <USBD_LL_Transmit>

      return USBD_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	e002      	b.n	800795a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007954:	2301      	movs	r3, #1
 8007956:	e000      	b.n	800795a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007958:	2302      	movs	r3, #2
  }
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007970:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d017      	beq.n	80079ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	7c1b      	ldrb	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800798a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798e:	2101      	movs	r1, #1
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fcc5 	bl	8009320 <USBD_LL_PrepareReceive>
 8007996:	e007      	b.n	80079a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800799e:	2340      	movs	r3, #64	; 0x40
 80079a0:	2101      	movs	r1, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fcbc 	bl	8009320 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	4613      	mov	r3, r2
 80079c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079ca:	2302      	movs	r3, #2
 80079cc:	e01a      	b.n	8007a04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	79fa      	ldrb	r2, [r7, #7]
 80079fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f001 fb29 	bl	8009054 <USBD_LL_Init>

  return USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
 8007a2c:	e001      	b.n	8007a32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 fb5e 	bl	8009108 <USBD_LL_Start>

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	4611      	mov	r1, r2
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fed8 	bl	8008896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007af4:	461a      	mov	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d016      	beq.n	8007b38 <USBD_LL_SetupStage+0x6a>
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d81c      	bhi.n	8007b48 <USBD_LL_SetupStage+0x7a>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <USBD_LL_SetupStage+0x4a>
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d008      	beq.n	8007b28 <USBD_LL_SetupStage+0x5a>
 8007b16:	e017      	b.n	8007b48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9cb 	bl	8007ebc <USBD_StdDevReq>
      break;
 8007b26:	e01a      	b.n	8007b5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa2d 	bl	8007f90 <USBD_StdItfReq>
      break;
 8007b36:	e012      	b.n	8007b5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa6d 	bl	8008020 <USBD_StdEPReq>
      break;
 8007b46:	e00a      	b.n	8007b5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fb36 	bl	80091c8 <USBD_LL_StallEP>
      break;
 8007b5c:	bf00      	nop
  }

  return USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	460b      	mov	r3, r1
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d14b      	bne.n	8007c14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d134      	bne.n	8007bf8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d919      	bls.n	8007bce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d203      	bcs.n	8007bbc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	e002      	b.n	8007bc2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 ff57 	bl	8008a7a <USBD_CtlContinueRx>
 8007bcc:	e038      	b.n	8007c40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d105      	bne.n	8007bf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 ff54 	bl	8008a9e <USBD_CtlSendStatus>
 8007bf6:	e023      	b.n	8007c40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d11e      	bne.n	8007c40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f001 fadb 	bl	80091c8 <USBD_LL_StallEP>
 8007c12:	e015      	b.n	8007c40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00d      	beq.n	8007c3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d108      	bne.n	8007c3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	7afa      	ldrb	r2, [r7, #11]
 8007c34:	4611      	mov	r1, r2
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	4798      	blx	r3
 8007c3a:	e001      	b.n	8007c40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e000      	b.n	8007c42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b086      	sub	sp, #24
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	460b      	mov	r3, r1
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d17f      	bne.n	8007d5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3314      	adds	r3, #20
 8007c62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d15c      	bne.n	8007d28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d915      	bls.n	8007ca6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fec1 	bl	8008a1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 fb3e 	bl	8009320 <USBD_LL_PrepareReceive>
 8007ca4:	e04e      	b.n	8007d44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	6912      	ldr	r2, [r2, #16]
 8007cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cb2:	fb01 f202 	mul.w	r2, r1, r2
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11c      	bne.n	8007cf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d316      	bcc.n	8007cf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d20f      	bcs.n	8007cf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2100      	movs	r1, #0
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 fe9d 	bl	8008a1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2200      	movs	r2, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f001 fb16 	bl	8009320 <USBD_LL_PrepareReceive>
 8007cf4:	e026      	b.n	8007d44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d105      	bne.n	8007d18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d18:	2180      	movs	r1, #128	; 0x80
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f001 fa54 	bl	80091c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fecf 	bl	8008ac4 <USBD_CtlReceiveStatus>
 8007d26:	e00d      	b.n	8007d44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d004      	beq.n	8007d3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d103      	bne.n	8007d44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f001 fa42 	bl	80091c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d11d      	bne.n	8007d8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff fe81 	bl	8007a56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d5c:	e015      	b.n	8007d8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00d      	beq.n	8007d86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d108      	bne.n	8007d86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	7afa      	ldrb	r2, [r7, #11]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	4798      	blx	r3
 8007d84:	e001      	b.n	8007d8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d86:	2302      	movs	r3, #2
 8007d88:	e000      	b.n	8007d8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 f9cb 	bl	800913e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2240      	movs	r2, #64	; 0x40
 8007db4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007db8:	2340      	movs	r3, #64	; 0x40
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2180      	movs	r1, #128	; 0x80
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 f9bd 	bl	800913e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2240      	movs	r2, #64	; 0x40
 8007dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6852      	ldr	r2, [r2, #4]
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	4611      	mov	r1, r2
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
  }

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr

08007e34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr

08007e5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d105      	bne.n	8007e7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d10b      	bne.n	8007eb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d005      	beq.n	8007ee2 <USBD_StdDevReq+0x26>
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d84f      	bhi.n	8007f7a <USBD_StdDevReq+0xbe>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <USBD_StdDevReq+0x36>
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d14b      	bne.n	8007f7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	4798      	blx	r3
      break;
 8007ef0:	e048      	b.n	8007f84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d839      	bhi.n	8007f6e <USBD_StdDevReq+0xb2>
 8007efa:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <USBD_StdDevReq+0x44>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f51 	.word	0x08007f51
 8007f04:	08007f65 	.word	0x08007f65
 8007f08:	08007f6f 	.word	0x08007f6f
 8007f0c:	08007f5b 	.word	0x08007f5b
 8007f10:	08007f6f 	.word	0x08007f6f
 8007f14:	08007f33 	.word	0x08007f33
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f6f 	.word	0x08007f6f
 8007f20:	08007f47 	.word	0x08007f47
 8007f24:	08007f3d 	.word	0x08007f3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9dc 	bl	80082e8 <USBD_GetDescriptor>
          break;
 8007f30:	e022      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fb3f 	bl	80085b8 <USBD_SetAddress>
          break;
 8007f3a:	e01d      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fb7e 	bl	8008640 <USBD_SetConfig>
          break;
 8007f44:	e018      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc07 	bl	800875c <USBD_GetConfig>
          break;
 8007f4e:	e013      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fc37 	bl	80087c6 <USBD_GetStatus>
          break;
 8007f58:	e00e      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fc65 	bl	800882c <USBD_SetFeature>
          break;
 8007f62:	e009      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fc74 	bl	8008854 <USBD_ClrFeature>
          break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fccc 	bl	800890e <USBD_CtlError>
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fcc6 	bl	800890e <USBD_CtlError>
      break;
 8007f82:	bf00      	nop
  }

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop

08007f90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d005      	beq.n	8007fb6 <USBD_StdItfReq+0x26>
 8007faa:	2b40      	cmp	r3, #64	; 0x40
 8007fac:	d82e      	bhi.n	800800c <USBD_StdItfReq+0x7c>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USBD_StdItfReq+0x26>
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d12a      	bne.n	800800c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d81d      	bhi.n	8007ffe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	889b      	ldrh	r3, [r3, #4]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d813      	bhi.n	8007ff4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88db      	ldrh	r3, [r3, #6]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d110      	bne.n	8008008 <USBD_StdItfReq+0x78>
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10d      	bne.n	8008008 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fd56 	bl	8008a9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ff2:	e009      	b.n	8008008 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc89 	bl	800890e <USBD_CtlError>
          break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fc84 	bl	800890e <USBD_CtlError>
          break;
 8008006:	e000      	b.n	800800a <USBD_StdItfReq+0x7a>
          break;
 8008008:	bf00      	nop
      }
      break;
 800800a:	e004      	b.n	8008016 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc7d 	bl	800890e <USBD_CtlError>
      break;
 8008014:	bf00      	nop
  }

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	889b      	ldrh	r3, [r3, #4]
 8008032:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d007      	beq.n	8008050 <USBD_StdEPReq+0x30>
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	f200 8146 	bhi.w	80082d2 <USBD_StdEPReq+0x2b2>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <USBD_StdEPReq+0x40>
 800804a:	2b20      	cmp	r3, #32
 800804c:	f040 8141 	bne.w	80082d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3
      break;
 800805e:	e13d      	b.n	80082dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008068:	2b20      	cmp	r3, #32
 800806a:	d10a      	bne.n	8008082 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	e12d      	b.n	80082de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	2b03      	cmp	r3, #3
 8008088:	d007      	beq.n	800809a <USBD_StdEPReq+0x7a>
 800808a:	2b03      	cmp	r3, #3
 800808c:	f300 811b 	bgt.w	80082c6 <USBD_StdEPReq+0x2a6>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d072      	beq.n	800817a <USBD_StdEPReq+0x15a>
 8008094:	2b01      	cmp	r3, #1
 8008096:	d03a      	beq.n	800810e <USBD_StdEPReq+0xee>
 8008098:	e115      	b.n	80082c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d002      	beq.n	80080aa <USBD_StdEPReq+0x8a>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d015      	beq.n	80080d4 <USBD_StdEPReq+0xb4>
 80080a8:	e02b      	b.n	8008102 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <USBD_StdEPReq+0xaa>
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	d009      	beq.n	80080ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 f884 	bl	80091c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080c0:	2180      	movs	r1, #128	; 0x80
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f880 	bl	80091c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c8:	e020      	b.n	800810c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fc1e 	bl	800890e <USBD_CtlError>
              break;
 80080d2:	e01b      	b.n	800810c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	885b      	ldrh	r3, [r3, #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10e      	bne.n	80080fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <USBD_StdEPReq+0xda>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d008      	beq.n	80080fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	88db      	ldrh	r3, [r3, #6]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 f867 	bl	80091c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fccf 	bl	8008a9e <USBD_CtlSendStatus>

              break;
 8008100:	e004      	b.n	800810c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc02 	bl	800890e <USBD_CtlError>
              break;
 800810a:	bf00      	nop
          }
          break;
 800810c:	e0e0      	b.n	80082d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008114:	2b02      	cmp	r3, #2
 8008116:	d002      	beq.n	800811e <USBD_StdEPReq+0xfe>
 8008118:	2b03      	cmp	r3, #3
 800811a:	d015      	beq.n	8008148 <USBD_StdEPReq+0x128>
 800811c:	e026      	b.n	800816c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <USBD_StdEPReq+0x11e>
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b80      	cmp	r3, #128	; 0x80
 8008128:	d009      	beq.n	800813e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f84a 	bl	80091c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008134:	2180      	movs	r1, #128	; 0x80
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 f846 	bl	80091c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800813c:	e01c      	b.n	8008178 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fbe4 	bl	800890e <USBD_CtlError>
              break;
 8008146:	e017      	b.n	8008178 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	885b      	ldrh	r3, [r3, #2]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d112      	bne.n	8008176 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f851 	bl	8009206 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc9a 	bl	8008a9e <USBD_CtlSendStatus>
              }
              break;
 800816a:	e004      	b.n	8008176 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fbcd 	bl	800890e <USBD_CtlError>
              break;
 8008174:	e000      	b.n	8008178 <USBD_StdEPReq+0x158>
              break;
 8008176:	bf00      	nop
          }
          break;
 8008178:	e0aa      	b.n	80082d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	2b02      	cmp	r3, #2
 8008182:	d002      	beq.n	800818a <USBD_StdEPReq+0x16a>
 8008184:	2b03      	cmp	r3, #3
 8008186:	d032      	beq.n	80081ee <USBD_StdEPReq+0x1ce>
 8008188:	e097      	b.n	80082ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <USBD_StdEPReq+0x180>
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d004      	beq.n	80081a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fbb8 	bl	800890e <USBD_CtlError>
                break;
 800819e:	e091      	b.n	80082c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	da0b      	bge.n	80081c0 <USBD_StdEPReq+0x1a0>
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	3310      	adds	r3, #16
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	4413      	add	r3, r2
 80081bc:	3304      	adds	r3, #4
 80081be:	e00b      	b.n	80081d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4413      	add	r3, r2
 80081d6:	3304      	adds	r3, #4
 80081d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2202      	movs	r2, #2
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fbfb 	bl	80089e2 <USBD_CtlSendData>
              break;
 80081ec:	e06a      	b.n	80082c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	da11      	bge.n	800821a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	f003 020f 	and.w	r2, r3, #15
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	3318      	adds	r3, #24
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d117      	bne.n	8008240 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fb7b 	bl	800890e <USBD_CtlError>
                  break;
 8008218:	e054      	b.n	80082c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	f003 020f 	and.w	r2, r3, #15
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fb68 	bl	800890e <USBD_CtlError>
                  break;
 800823e:	e041      	b.n	80082c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	da0b      	bge.n	8008260 <USBD_StdEPReq+0x240>
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	3310      	adds	r3, #16
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	4413      	add	r3, r2
 800825c:	3304      	adds	r3, #4
 800825e:	e00b      	b.n	8008278 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4413      	add	r3, r2
 8008276:	3304      	adds	r3, #4
 8008278:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <USBD_StdEPReq+0x266>
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d103      	bne.n	800828e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e00e      	b.n	80082ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 ffd6 	bl	8009244 <USBD_LL_IsStallEP>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2201      	movs	r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e002      	b.n	80082ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2202      	movs	r2, #2
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb95 	bl	80089e2 <USBD_CtlSendData>
              break;
 80082b8:	e004      	b.n	80082c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb26 	bl	800890e <USBD_CtlError>
              break;
 80082c2:	bf00      	nop
          }
          break;
 80082c4:	e004      	b.n	80082d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fb20 	bl	800890e <USBD_CtlError>
          break;
 80082ce:	bf00      	nop
      }
      break;
 80082d0:	e004      	b.n	80082dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fb1a 	bl	800890e <USBD_CtlError>
      break;
 80082da:	bf00      	nop
  }

  return ret;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	885b      	ldrh	r3, [r3, #2]
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	2b06      	cmp	r3, #6
 800830a:	f200 8128 	bhi.w	800855e <USBD_GetDescriptor+0x276>
 800830e:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <USBD_GetDescriptor+0x2c>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	08008331 	.word	0x08008331
 8008318:	08008349 	.word	0x08008349
 800831c:	08008389 	.word	0x08008389
 8008320:	0800855f 	.word	0x0800855f
 8008324:	0800855f 	.word	0x0800855f
 8008328:	080084ff 	.word	0x080084ff
 800832c:	0800852b 	.word	0x0800852b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	7c12      	ldrb	r2, [r2, #16]
 800833c:	f107 0108 	add.w	r1, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
      break;
 8008346:	e112      	b.n	800856e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7c1b      	ldrb	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10d      	bne.n	800836c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	f107 0208 	add.w	r2, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	2202      	movs	r2, #2
 8008368:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800836a:	e100      	b.n	800856e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	f107 0208 	add.w	r2, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	2202      	movs	r2, #2
 8008384:	701a      	strb	r2, [r3, #0]
      break;
 8008386:	e0f2      	b.n	800856e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	885b      	ldrh	r3, [r3, #2]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b05      	cmp	r3, #5
 8008390:	f200 80ac 	bhi.w	80084ec <USBD_GetDescriptor+0x204>
 8008394:	a201      	add	r2, pc, #4	; (adr r2, 800839c <USBD_GetDescriptor+0xb4>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083b5 	.word	0x080083b5
 80083a0:	080083e9 	.word	0x080083e9
 80083a4:	0800841d 	.word	0x0800841d
 80083a8:	08008451 	.word	0x08008451
 80083ac:	08008485 	.word	0x08008485
 80083b0:	080084b9 	.word	0x080084b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	7c12      	ldrb	r2, [r2, #16]
 80083cc:	f107 0108 	add.w	r1, r7, #8
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d6:	e091      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa97 	bl	800890e <USBD_CtlError>
            err++;
 80083e0:	7afb      	ldrb	r3, [r7, #11]
 80083e2:	3301      	adds	r3, #1
 80083e4:	72fb      	strb	r3, [r7, #11]
          break;
 80083e6:	e089      	b.n	80084fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	7c12      	ldrb	r2, [r2, #16]
 8008400:	f107 0108 	add.w	r1, r7, #8
 8008404:	4610      	mov	r0, r2
 8008406:	4798      	blx	r3
 8008408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800840a:	e077      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fa7d 	bl	800890e <USBD_CtlError>
            err++;
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	3301      	adds	r3, #1
 8008418:	72fb      	strb	r3, [r7, #11]
          break;
 800841a:	e06f      	b.n	80084fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	7c12      	ldrb	r2, [r2, #16]
 8008434:	f107 0108 	add.w	r1, r7, #8
 8008438:	4610      	mov	r0, r2
 800843a:	4798      	blx	r3
 800843c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843e:	e05d      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa63 	bl	800890e <USBD_CtlError>
            err++;
 8008448:	7afb      	ldrb	r3, [r7, #11]
 800844a:	3301      	adds	r3, #1
 800844c:	72fb      	strb	r3, [r7, #11]
          break;
 800844e:	e055      	b.n	80084fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	7c12      	ldrb	r2, [r2, #16]
 8008468:	f107 0108 	add.w	r1, r7, #8
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008472:	e043      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa49 	bl	800890e <USBD_CtlError>
            err++;
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	3301      	adds	r3, #1
 8008480:	72fb      	strb	r3, [r7, #11]
          break;
 8008482:	e03b      	b.n	80084fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	7c12      	ldrb	r2, [r2, #16]
 800849c:	f107 0108 	add.w	r1, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a6:	e029      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa2f 	bl	800890e <USBD_CtlError>
            err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
          break;
 80084b6:	e021      	b.n	80084fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7c12      	ldrb	r2, [r2, #16]
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084da:	e00f      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa15 	bl	800890e <USBD_CtlError>
            err++;
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	3301      	adds	r3, #1
 80084e8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ea:	e007      	b.n	80084fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa0d 	bl	800890e <USBD_CtlError>
          err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084fa:	e038      	b.n	800856e <USBD_GetDescriptor+0x286>
 80084fc:	e037      	b.n	800856e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7c1b      	ldrb	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	f107 0208 	add.w	r2, r7, #8
 8008512:	4610      	mov	r0, r2
 8008514:	4798      	blx	r3
 8008516:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008518:	e029      	b.n	800856e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f9f6 	bl	800890e <USBD_CtlError>
        err++;
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	3301      	adds	r3, #1
 8008526:	72fb      	strb	r3, [r7, #11]
      break;
 8008528:	e021      	b.n	800856e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7c1b      	ldrb	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10d      	bne.n	800854e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	f107 0208 	add.w	r2, r7, #8
 800853e:	4610      	mov	r0, r2
 8008540:	4798      	blx	r3
 8008542:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	2207      	movs	r2, #7
 800854a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800854c:	e00f      	b.n	800856e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9dc 	bl	800890e <USBD_CtlError>
        err++;
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	3301      	adds	r3, #1
 800855a:	72fb      	strb	r3, [r7, #11]
      break;
 800855c:	e007      	b.n	800856e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f9d4 	bl	800890e <USBD_CtlError>
      err++;
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	3301      	adds	r3, #1
 800856a:	72fb      	strb	r3, [r7, #11]
      break;
 800856c:	bf00      	nop
  }

  if (err != 0U)
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11c      	bne.n	80085ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008574:	893b      	ldrh	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d011      	beq.n	800859e <USBD_GetDescriptor+0x2b6>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	88db      	ldrh	r3, [r3, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00d      	beq.n	800859e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	88da      	ldrh	r2, [r3, #6]
 8008586:	893b      	ldrh	r3, [r7, #8]
 8008588:	4293      	cmp	r3, r2
 800858a:	bf28      	it	cs
 800858c:	4613      	movcs	r3, r2
 800858e:	b29b      	uxth	r3, r3
 8008590:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008592:	893b      	ldrh	r3, [r7, #8]
 8008594:	461a      	mov	r2, r3
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa22 	bl	80089e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88db      	ldrh	r3, [r3, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa79 	bl	8008a9e <USBD_CtlSendStatus>
 80085ac:	e000      	b.n	80085b0 <USBD_GetDescriptor+0x2c8>
    return;
 80085ae:	bf00      	nop
    }
  }
}
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop

080085b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	889b      	ldrh	r3, [r3, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d130      	bne.n	800862c <USBD_SetAddress+0x74>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88db      	ldrh	r3, [r3, #6]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d12c      	bne.n	800862c <USBD_SetAddress+0x74>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	2b7f      	cmp	r3, #127	; 0x7f
 80085d8:	d828      	bhi.n	800862c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d104      	bne.n	80085fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f98b 	bl	800890e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f8:	e01d      	b.n	8008636 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7bfa      	ldrb	r2, [r7, #15]
 80085fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fe48 	bl	800929c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa46 	bl	8008a9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d004      	beq.n	8008622 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008620:	e009      	b.n	8008636 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862a:	e004      	b.n	8008636 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f96d 	bl	800890e <USBD_CtlError>
  }
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	885b      	ldrh	r3, [r3, #2]
 800864e:	b2da      	uxtb	r2, r3
 8008650:	4b41      	ldr	r3, [pc, #260]	; (8008758 <USBD_SetConfig+0x118>)
 8008652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008654:	4b40      	ldr	r3, [pc, #256]	; (8008758 <USBD_SetConfig+0x118>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d904      	bls.n	8008666 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f955 	bl	800890e <USBD_CtlError>
 8008664:	e075      	b.n	8008752 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866c:	2b02      	cmp	r3, #2
 800866e:	d002      	beq.n	8008676 <USBD_SetConfig+0x36>
 8008670:	2b03      	cmp	r3, #3
 8008672:	d023      	beq.n	80086bc <USBD_SetConfig+0x7c>
 8008674:	e062      	b.n	800873c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008676:	4b38      	ldr	r3, [pc, #224]	; (8008758 <USBD_SetConfig+0x118>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01a      	beq.n	80086b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800867e:	4b36      	ldr	r3, [pc, #216]	; (8008758 <USBD_SetConfig+0x118>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2203      	movs	r2, #3
 800868c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008690:	4b31      	ldr	r3, [pc, #196]	; (8008758 <USBD_SetConfig+0x118>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff f9e7 	bl	8007a6a <USBD_SetClassConfig>
 800869c:	4603      	mov	r3, r0
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d104      	bne.n	80086ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f932 	bl	800890e <USBD_CtlError>
            return;
 80086aa:	e052      	b.n	8008752 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f9f6 	bl	8008a9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086b2:	e04e      	b.n	8008752 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9f2 	bl	8008a9e <USBD_CtlSendStatus>
        break;
 80086ba:	e04a      	b.n	8008752 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80086bc:	4b26      	ldr	r3, [pc, #152]	; (8008758 <USBD_SetConfig+0x118>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d112      	bne.n	80086ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80086cc:	4b22      	ldr	r3, [pc, #136]	; (8008758 <USBD_SetConfig+0x118>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086d6:	4b20      	ldr	r3, [pc, #128]	; (8008758 <USBD_SetConfig+0x118>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff f9e3 	bl	8007aa8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9db 	bl	8008a9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086e8:	e033      	b.n	8008752 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <USBD_SetConfig+0x118>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d01d      	beq.n	8008734 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff f9d1 	bl	8007aa8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008706:	4b14      	ldr	r3, [pc, #80]	; (8008758 <USBD_SetConfig+0x118>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008710:	4b11      	ldr	r3, [pc, #68]	; (8008758 <USBD_SetConfig+0x118>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff f9a7 	bl	8007a6a <USBD_SetClassConfig>
 800871c:	4603      	mov	r3, r0
 800871e:	2b02      	cmp	r3, #2
 8008720:	d104      	bne.n	800872c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f8f2 	bl	800890e <USBD_CtlError>
            return;
 800872a:	e012      	b.n	8008752 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f9b6 	bl	8008a9e <USBD_CtlSendStatus>
        break;
 8008732:	e00e      	b.n	8008752 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9b2 	bl	8008a9e <USBD_CtlSendStatus>
        break;
 800873a:	e00a      	b.n	8008752 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8e5 	bl	800890e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <USBD_SetConfig+0x118>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff f9ac 	bl	8007aa8 <USBD_ClrClassConfig>
        break;
 8008750:	bf00      	nop
    }
  }
}
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	2000028c 	.word	0x2000028c

0800875c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	88db      	ldrh	r3, [r3, #6]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d004      	beq.n	8008778 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8cc 	bl	800890e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008776:	e022      	b.n	80087be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877e:	2b02      	cmp	r3, #2
 8008780:	dc02      	bgt.n	8008788 <USBD_GetConfig+0x2c>
 8008782:	2b00      	cmp	r3, #0
 8008784:	dc03      	bgt.n	800878e <USBD_GetConfig+0x32>
 8008786:	e015      	b.n	80087b4 <USBD_GetConfig+0x58>
 8008788:	2b03      	cmp	r3, #3
 800878a:	d00b      	beq.n	80087a4 <USBD_GetConfig+0x48>
 800878c:	e012      	b.n	80087b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3308      	adds	r3, #8
 8008798:	2201      	movs	r2, #1
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f920 	bl	80089e2 <USBD_CtlSendData>
        break;
 80087a2:	e00c      	b.n	80087be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3304      	adds	r3, #4
 80087a8:	2201      	movs	r2, #1
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f918 	bl	80089e2 <USBD_CtlSendData>
        break;
 80087b2:	e004      	b.n	80087be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f8a9 	bl	800890e <USBD_CtlError>
        break;
 80087bc:	bf00      	nop
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d6:	3b01      	subs	r3, #1
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d81e      	bhi.n	800881a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	88db      	ldrh	r3, [r3, #6]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d004      	beq.n	80087ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f891 	bl	800890e <USBD_CtlError>
        break;
 80087ec:	e01a      	b.n	8008824 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f043 0202 	orr.w	r2, r3, #2
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	330c      	adds	r3, #12
 800880e:	2202      	movs	r2, #2
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f8e5 	bl	80089e2 <USBD_CtlSendData>
      break;
 8008818:	e004      	b.n	8008824 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f876 	bl	800890e <USBD_CtlError>
      break;
 8008822:	bf00      	nop
  }
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	885b      	ldrh	r3, [r3, #2]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d106      	bne.n	800884c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f929 	bl	8008a9e <USBD_CtlSendStatus>
  }
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	3b01      	subs	r3, #1
 8008866:	2b02      	cmp	r3, #2
 8008868:	d80b      	bhi.n	8008882 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10c      	bne.n	800888c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f90f 	bl	8008a9e <USBD_CtlSendStatus>
      }
      break;
 8008880:	e004      	b.n	800888c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f842 	bl	800890e <USBD_CtlError>
      break;
 800888a:	e000      	b.n	800888e <USBD_ClrFeature+0x3a>
      break;
 800888c:	bf00      	nop
  }
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	785a      	ldrb	r2, [r3, #1]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	3302      	adds	r3, #2
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	3303      	adds	r3, #3
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	3304      	adds	r3, #4
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	3305      	adds	r3, #5
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4413      	add	r3, r2
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	3306      	adds	r3, #6
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	3307      	adds	r3, #7
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	80da      	strh	r2, [r3, #6]

}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr

0800890e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008918:	2180      	movs	r1, #128	; 0x80
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fc54 	bl	80091c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008920:	2100      	movs	r1, #0
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fc50 	bl	80091c8 <USBD_LL_StallEP>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d032      	beq.n	80089ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f834 	bl	80089b4 <USBD_GetLen>
 800894c:	4603      	mov	r3, r0
 800894e:	3301      	adds	r3, #1
 8008950:	b29b      	uxth	r3, r3
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	b29a      	uxth	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	75fa      	strb	r2, [r7, #23]
 8008960:	461a      	mov	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	4413      	add	r3, r2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	7812      	ldrb	r2, [r2, #0]
 800896a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	75fa      	strb	r2, [r7, #23]
 8008972:	461a      	mov	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4413      	add	r3, r2
 8008978:	2203      	movs	r2, #3
 800897a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800897c:	e012      	b.n	80089a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	60fa      	str	r2, [r7, #12]
 8008984:	7dfa      	ldrb	r2, [r7, #23]
 8008986:	1c51      	adds	r1, r2, #1
 8008988:	75f9      	strb	r1, [r7, #23]
 800898a:	4611      	mov	r1, r2
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	440a      	add	r2, r1
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	75fa      	strb	r2, [r7, #23]
 800899a:	461a      	mov	r2, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4413      	add	r3, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e8      	bne.n	800897e <USBD_GetString+0x4e>
    }
  }
}
 80089ac:	bf00      	nop
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80089c0:	e005      	b.n	80089ce <USBD_GetLen+0x1a>
  {
    len++;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	3301      	adds	r3, #1
 80089c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3301      	adds	r3, #1
 80089cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f5      	bne.n	80089c2 <USBD_GetLen+0xe>
  }

  return len;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089f8:	88fa      	ldrh	r2, [r7, #6]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fc65 	bl	80092da <USBD_LL_Transmit>

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	4613      	mov	r3, r2
 8008a26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a28:	88fb      	ldrh	r3, [r7, #6]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fc53 	bl	80092da <USBD_LL_Transmit>

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a54:	88fa      	ldrh	r2, [r7, #6]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a5c:	88fa      	ldrh	r2, [r7, #6]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a64:	88fb      	ldrh	r3, [r7, #6]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fc58 	bl	8009320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	4613      	mov	r3, r2
 8008a86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a88:	88fb      	ldrh	r3, [r7, #6]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fc46 	bl	8009320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fc10 	bl	80092da <USBD_LL_Transmit>

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2205      	movs	r2, #5
 8008ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc20 	bl	8009320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008af0:	2200      	movs	r2, #0
 8008af2:	4912      	ldr	r1, [pc, #72]	; (8008b3c <MX_USB_DEVICE_Init+0x50>)
 8008af4:	4812      	ldr	r0, [pc, #72]	; (8008b40 <MX_USB_DEVICE_Init+0x54>)
 8008af6:	f7fe ff5e 	bl	80079b6 <USBD_Init>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b00:	f7f7 fe02 	bl	8000708 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b04:	490f      	ldr	r1, [pc, #60]	; (8008b44 <MX_USB_DEVICE_Init+0x58>)
 8008b06:	480e      	ldr	r0, [pc, #56]	; (8008b40 <MX_USB_DEVICE_Init+0x54>)
 8008b08:	f7fe ff80 	bl	8007a0c <USBD_RegisterClass>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b12:	f7f7 fdf9 	bl	8000708 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b16:	490c      	ldr	r1, [pc, #48]	; (8008b48 <MX_USB_DEVICE_Init+0x5c>)
 8008b18:	4809      	ldr	r0, [pc, #36]	; (8008b40 <MX_USB_DEVICE_Init+0x54>)
 8008b1a:	f7fe feb1 	bl	8007880 <USBD_CDC_RegisterInterface>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b24:	f7f7 fdf0 	bl	8000708 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <MX_USB_DEVICE_Init+0x54>)
 8008b2a:	f7fe ff88 	bl	8007a3e <USBD_Start>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b34:	f7f7 fde8 	bl	8000708 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	2000012c 	.word	0x2000012c
 8008b40:	20000290 	.word	0x20000290
 8008b44:	20000018 	.word	0x20000018
 8008b48:	2000011c 	.word	0x2000011c

08008b4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b50:	2200      	movs	r2, #0
 8008b52:	4905      	ldr	r1, [pc, #20]	; (8008b68 <CDC_Init_FS+0x1c>)
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <CDC_Init_FS+0x20>)
 8008b56:	f7fe fea9 	bl	80078ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b5a:	4905      	ldr	r1, [pc, #20]	; (8008b70 <CDC_Init_FS+0x24>)
 8008b5c:	4803      	ldr	r0, [pc, #12]	; (8008b6c <CDC_Init_FS+0x20>)
 8008b5e:	f7fe febe 	bl	80078de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000954 	.word	0x20000954
 8008b6c:	20000290 	.word	0x20000290
 8008b70:	20000554 	.word	0x20000554

08008b74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
	...

08008b84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
 8008b90:	4613      	mov	r3, r2
 8008b92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	2b23      	cmp	r3, #35	; 0x23
 8008b98:	d84a      	bhi.n	8008c30 <CDC_Control_FS+0xac>
 8008b9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <CDC_Control_FS+0x1c>)
 8008b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba0:	08008c31 	.word	0x08008c31
 8008ba4:	08008c31 	.word	0x08008c31
 8008ba8:	08008c31 	.word	0x08008c31
 8008bac:	08008c31 	.word	0x08008c31
 8008bb0:	08008c31 	.word	0x08008c31
 8008bb4:	08008c31 	.word	0x08008c31
 8008bb8:	08008c31 	.word	0x08008c31
 8008bbc:	08008c31 	.word	0x08008c31
 8008bc0:	08008c31 	.word	0x08008c31
 8008bc4:	08008c31 	.word	0x08008c31
 8008bc8:	08008c31 	.word	0x08008c31
 8008bcc:	08008c31 	.word	0x08008c31
 8008bd0:	08008c31 	.word	0x08008c31
 8008bd4:	08008c31 	.word	0x08008c31
 8008bd8:	08008c31 	.word	0x08008c31
 8008bdc:	08008c31 	.word	0x08008c31
 8008be0:	08008c31 	.word	0x08008c31
 8008be4:	08008c31 	.word	0x08008c31
 8008be8:	08008c31 	.word	0x08008c31
 8008bec:	08008c31 	.word	0x08008c31
 8008bf0:	08008c31 	.word	0x08008c31
 8008bf4:	08008c31 	.word	0x08008c31
 8008bf8:	08008c31 	.word	0x08008c31
 8008bfc:	08008c31 	.word	0x08008c31
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008c31 	.word	0x08008c31
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c31 	.word	0x08008c31
 8008c18:	08008c31 	.word	0x08008c31
 8008c1c:	08008c31 	.word	0x08008c31
 8008c20:	08008c31 	.word	0x08008c31
 8008c24:	08008c31 	.word	0x08008c31
 8008c28:	08008c31 	.word	0x08008c31
 8008c2c:	08008c31 	.word	0x08008c31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c30:	bf00      	nop
  }

  return (USBD_OK);
 8008c32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	4805      	ldr	r0, [pc, #20]	; (8008c64 <CDC_Receive_FS+0x24>)
 8008c4e:	f7fe fe46 	bl	80078de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c52:	4804      	ldr	r0, [pc, #16]	; (8008c64 <CDC_Receive_FS+0x24>)
 8008c54:	f7fe fe85 	bl	8007962 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000290 	.word	0x20000290

08008c68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c78:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <CDC_Transmit_FS+0x48>)
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e00b      	b.n	8008ca6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c8e:	887b      	ldrh	r3, [r7, #2]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	4806      	ldr	r0, [pc, #24]	; (8008cb0 <CDC_Transmit_FS+0x48>)
 8008c96:	f7fe fe09 	bl	80078ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c9a:	4805      	ldr	r0, [pc, #20]	; (8008cb0 <CDC_Transmit_FS+0x48>)
 8008c9c:	f7fe fe32 	bl	8007904 <USBD_CDC_TransmitPacket>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000290 	.word	0x20000290

08008cb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2212      	movs	r2, #18
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000148 	.word	0x20000148

08008cd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	2000015c 	.word	0x2000015c

08008cfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	; (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d12:	4808      	ldr	r0, [pc, #32]	; (8008d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d14:	f7ff fe0c 	bl	8008930 <USBD_GetString>
 8008d18:	e004      	b.n	8008d24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d20:	f7ff fe06 	bl	8008930 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000d54 	.word	0x20000d54
 8008d34:	080094b4 	.word	0x080094b4

08008d38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	4904      	ldr	r1, [pc, #16]	; (8008d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d48:	4804      	ldr	r0, [pc, #16]	; (8008d5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d4a:	f7ff fdf1 	bl	8008930 <USBD_GetString>
  return USBD_StrDesc;
 8008d4e:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000d54 	.word	0x20000d54
 8008d5c:	080094cc 	.word	0x080094cc

08008d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	221a      	movs	r2, #26
 8008d70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d72:	f000 f843 	bl	8008dfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d76:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20000160 	.word	0x20000160

08008d84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4907      	ldr	r1, [pc, #28]	; (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d9a:	4808      	ldr	r0, [pc, #32]	; (8008dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d9c:	f7ff fdc8 	bl	8008930 <USBD_GetString>
 8008da0:	e004      	b.n	8008dac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	4904      	ldr	r1, [pc, #16]	; (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008da6:	4805      	ldr	r0, [pc, #20]	; (8008dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008da8:	f7ff fdc2 	bl	8008930 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000d54 	.word	0x20000d54
 8008dbc:	080094e0 	.word	0x080094e0

08008dc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4907      	ldr	r1, [pc, #28]	; (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dd6:	4808      	ldr	r0, [pc, #32]	; (8008df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dd8:	f7ff fdaa 	bl	8008930 <USBD_GetString>
 8008ddc:	e004      	b.n	8008de8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4904      	ldr	r1, [pc, #16]	; (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008de2:	4805      	ldr	r0, [pc, #20]	; (8008df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008de4:	f7ff fda4 	bl	8008930 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000d54 	.word	0x20000d54
 8008df8:	080094ec 	.word	0x080094ec

08008dfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <Get_SerialNum+0x44>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <Get_SerialNum+0x48>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <Get_SerialNum+0x4c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e22:	2208      	movs	r2, #8
 8008e24:	4909      	ldr	r1, [pc, #36]	; (8008e4c <Get_SerialNum+0x50>)
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f814 	bl	8008e54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	4908      	ldr	r1, [pc, #32]	; (8008e50 <Get_SerialNum+0x54>)
 8008e30:	68b8      	ldr	r0, [r7, #8]
 8008e32:	f000 f80f 	bl	8008e54 <IntToUnicode>
  }
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	1ffff7e8 	.word	0x1ffff7e8
 8008e44:	1ffff7ec 	.word	0x1ffff7ec
 8008e48:	1ffff7f0 	.word	0x1ffff7f0
 8008e4c:	20000162 	.word	0x20000162
 8008e50:	20000172 	.word	0x20000172

08008e54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e027      	b.n	8008ebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d80b      	bhi.n	8008e8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0f1b      	lsrs	r3, r3, #28
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	440b      	add	r3, r1
 8008e84:	3230      	adds	r2, #48	; 0x30
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	e00a      	b.n	8008ea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4619      	mov	r1, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3237      	adds	r2, #55	; 0x37
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	3301      	adds	r3, #1
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
 8008ebc:	7dfa      	ldrb	r2, [r7, #23]
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3d3      	bcc.n	8008e6c <IntToUnicode+0x18>
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr

08008ed0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a0d      	ldr	r2, [pc, #52]	; (8008f14 <HAL_PCD_MspInit+0x44>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d113      	bne.n	8008f0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <HAL_PCD_MspInit+0x48>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <HAL_PCD_MspInit+0x48>)
 8008ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008eec:	61d3      	str	r3, [r2, #28]
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <HAL_PCD_MspInit+0x48>)
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008efa:	2200      	movs	r2, #0
 8008efc:	2100      	movs	r1, #0
 8008efe:	2014      	movs	r0, #20
 8008f00:	f7f8 fbeb 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f04:	2014      	movs	r0, #20
 8008f06:	f7f8 fc04 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	40005c00 	.word	0x40005c00
 8008f18:	40021000 	.word	0x40021000

08008f1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f7fe fdcb 	bl	8007ace <USBD_LL_SetupStage>
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f52:	78fa      	ldrb	r2, [r7, #3]
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	440b      	add	r3, r1
 8008f60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	78fb      	ldrb	r3, [r7, #3]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f7fe fdfd 	bl	8007b68 <USBD_LL_DataOutStage>
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	440b      	add	r3, r1
 8008f96:	333c      	adds	r3, #60	; 0x3c
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f7fe fe54 	bl	8007c4a <USBD_LL_DataInStage>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe ff64 	bl	8007e86 <USBD_LL_SOF>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d001      	beq.n	8008fde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fda:	f7f7 fb95 	bl	8000708 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fe4:	7bfa      	ldrb	r2, [r7, #15]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe ff14 	bl	8007e16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fecd 	bl	8007d94 <USBD_LL_Reset>
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe ff0e 	bl	8007e34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d005      	beq.n	800902c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009020:	4b04      	ldr	r3, [pc, #16]	; (8009034 <HAL_PCD_SuspendCallback+0x30>)
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	4a03      	ldr	r2, [pc, #12]	; (8009034 <HAL_PCD_SuspendCallback+0x30>)
 8009026:	f043 0306 	orr.w	r3, r3, #6
 800902a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	e000ed00 	.word	0xe000ed00

08009038 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe ff08 	bl	8007e5c <USBD_LL_Resume>
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800905c:	4a28      	ldr	r2, [pc, #160]	; (8009100 <USBD_LL_Init+0xac>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a26      	ldr	r2, [pc, #152]	; (8009100 <USBD_LL_Init+0xac>)
 8009068:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800906c:	4b24      	ldr	r3, [pc, #144]	; (8009100 <USBD_LL_Init+0xac>)
 800906e:	4a25      	ldr	r2, [pc, #148]	; (8009104 <USBD_LL_Init+0xb0>)
 8009070:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009072:	4b23      	ldr	r3, [pc, #140]	; (8009100 <USBD_LL_Init+0xac>)
 8009074:	2208      	movs	r2, #8
 8009076:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009078:	4b21      	ldr	r3, [pc, #132]	; (8009100 <USBD_LL_Init+0xac>)
 800907a:	2202      	movs	r2, #2
 800907c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800907e:	4b20      	ldr	r3, [pc, #128]	; (8009100 <USBD_LL_Init+0xac>)
 8009080:	2200      	movs	r2, #0
 8009082:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009084:	4b1e      	ldr	r3, [pc, #120]	; (8009100 <USBD_LL_Init+0xac>)
 8009086:	2200      	movs	r2, #0
 8009088:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <USBD_LL_Init+0xac>)
 800908c:	2200      	movs	r2, #0
 800908e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009090:	481b      	ldr	r0, [pc, #108]	; (8009100 <USBD_LL_Init+0xac>)
 8009092:	f7f8 fefc 	bl	8001e8e <HAL_PCD_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800909c:	f7f7 fb34 	bl	8000708 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090a6:	2318      	movs	r3, #24
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	f7fa fb70 	bl	8003790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090b6:	2358      	movs	r3, #88	; 0x58
 80090b8:	2200      	movs	r2, #0
 80090ba:	2180      	movs	r1, #128	; 0x80
 80090bc:	f7fa fb68 	bl	8003790 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090c6:	23c0      	movs	r3, #192	; 0xc0
 80090c8:	2200      	movs	r2, #0
 80090ca:	2181      	movs	r1, #129	; 0x81
 80090cc:	f7fa fb60 	bl	8003790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090da:	2200      	movs	r2, #0
 80090dc:	2101      	movs	r1, #1
 80090de:	f7fa fb57 	bl	8003790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ec:	2200      	movs	r2, #0
 80090ee:	2182      	movs	r1, #130	; 0x82
 80090f0:	f7fa fb4e 	bl	8003790 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000f54 	.word	0x20000f54
 8009104:	40005c00 	.word	0x40005c00

08009108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800911e:	4618      	mov	r0, r3
 8009120:	f7f8 ffc0 	bl	80020a4 <HAL_PCD_Start>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f94e 	bl	80093cc <USBD_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	4603      	mov	r3, r0
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	460b      	mov	r3, r1
 8009152:	70bb      	strb	r3, [r7, #2]
 8009154:	4613      	mov	r3, r2
 8009156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009166:	78bb      	ldrb	r3, [r7, #2]
 8009168:	883a      	ldrh	r2, [r7, #0]
 800916a:	78f9      	ldrb	r1, [r7, #3]
 800916c:	f7f9 f938 	bl	80023e0 <HAL_PCD_EP_Open>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 f928 	bl	80093cc <USBD_Get_USB_Status>
 800917c:	4603      	mov	r3, r0
 800917e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009180:	7bbb      	ldrb	r3, [r7, #14]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7f9 f97f 	bl	80024ac <HAL_PCD_EP_Close>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 f909 	bl	80093cc <USBD_Get_USB_Status>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091be:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e2:	78fa      	ldrb	r2, [r7, #3]
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7f9 fa3f 	bl	800266a <HAL_PCD_EP_SetStall>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f8ea 	bl	80093cc <USBD_Get_USB_Status>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f7f9 fa80 	bl	800272a <HAL_PCD_EP_ClrStall>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f8cb 	bl	80093cc <USBD_Get_USB_Status>
 8009236:	4603      	mov	r3, r0
 8009238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800923a:	7bbb      	ldrb	r3, [r7, #14]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800925c:	2b00      	cmp	r3, #0
 800925e:	da0c      	bge.n	800927a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	440b      	add	r3, r1
 8009274:	3302      	adds	r3, #2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	e00b      	b.n	8009292 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009280:	68f9      	ldr	r1, [r7, #12]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	440b      	add	r3, r1
 800928c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009290:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr

0800929c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7f9 f86b 	bl	8002396 <HAL_PCD_SetAddress>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f880 	bl	80093cc <USBD_Get_USB_Status>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	461a      	mov	r2, r3
 80092e6:	460b      	mov	r3, r1
 80092e8:	72fb      	strb	r3, [r7, #11]
 80092ea:	4613      	mov	r3, r2
 80092ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092fc:	893b      	ldrh	r3, [r7, #8]
 80092fe:	7af9      	ldrb	r1, [r7, #11]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	f7f9 f96f 	bl	80025e4 <HAL_PCD_EP_Transmit>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f85d 	bl	80093cc <USBD_Get_USB_Status>
 8009312:	4603      	mov	r3, r0
 8009314:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009316:	7dbb      	ldrb	r3, [r7, #22]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	461a      	mov	r2, r3
 800932c:	460b      	mov	r3, r1
 800932e:	72fb      	strb	r3, [r7, #11]
 8009330:	4613      	mov	r3, r2
 8009332:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	7af9      	ldrb	r1, [r7, #11]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	f7f9 f8f8 	bl	800253c <HAL_PCD_EP_Receive>
 800934c:	4603      	mov	r3, r0
 800934e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 f83a 	bl	80093cc <USBD_Get_USB_Status>
 8009358:	4603      	mov	r3, r0
 800935a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800935c:	7dbb      	ldrb	r3, [r7, #22]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7f9 f91a 	bl	80025b6 <HAL_PCD_EP_GetRxCount>
 8009382:	4603      	mov	r3, r0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_static_malloc+0x14>)
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr
 80093a0:	20001240 	.word	0x20001240

080093a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]

}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr

080093b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr

080093cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d817      	bhi.n	8009410 <USBD_Get_USB_Status+0x44>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <USBD_Get_USB_Status+0x1c>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	080093f9 	.word	0x080093f9
 80093ec:	080093ff 	.word	0x080093ff
 80093f0:	08009405 	.word	0x08009405
 80093f4:	0800940b 	.word	0x0800940b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
    break;
 80093fc:	e00b      	b.n	8009416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093fe:	2302      	movs	r3, #2
 8009400:	73fb      	strb	r3, [r7, #15]
    break;
 8009402:	e008      	b.n	8009416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
    break;
 8009408:	e005      	b.n	8009416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800940a:	2302      	movs	r3, #2
 800940c:	73fb      	strb	r3, [r7, #15]
    break;
 800940e:	e002      	b.n	8009416 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009410:	2302      	movs	r3, #2
 8009412:	73fb      	strb	r3, [r7, #15]
    break;
 8009414:	bf00      	nop
  }
  return usb_status;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop

08009424 <__libc_init_array>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	2600      	movs	r6, #0
 8009428:	4d0c      	ldr	r5, [pc, #48]	; (800945c <__libc_init_array+0x38>)
 800942a:	4c0d      	ldr	r4, [pc, #52]	; (8009460 <__libc_init_array+0x3c>)
 800942c:	1b64      	subs	r4, r4, r5
 800942e:	10a4      	asrs	r4, r4, #2
 8009430:	42a6      	cmp	r6, r4
 8009432:	d109      	bne.n	8009448 <__libc_init_array+0x24>
 8009434:	f000 f822 	bl	800947c <_init>
 8009438:	2600      	movs	r6, #0
 800943a:	4d0a      	ldr	r5, [pc, #40]	; (8009464 <__libc_init_array+0x40>)
 800943c:	4c0a      	ldr	r4, [pc, #40]	; (8009468 <__libc_init_array+0x44>)
 800943e:	1b64      	subs	r4, r4, r5
 8009440:	10a4      	asrs	r4, r4, #2
 8009442:	42a6      	cmp	r6, r4
 8009444:	d105      	bne.n	8009452 <__libc_init_array+0x2e>
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	f855 3b04 	ldr.w	r3, [r5], #4
 800944c:	4798      	blx	r3
 800944e:	3601      	adds	r6, #1
 8009450:	e7ee      	b.n	8009430 <__libc_init_array+0xc>
 8009452:	f855 3b04 	ldr.w	r3, [r5], #4
 8009456:	4798      	blx	r3
 8009458:	3601      	adds	r6, #1
 800945a:	e7f2      	b.n	8009442 <__libc_init_array+0x1e>
 800945c:	08009514 	.word	0x08009514
 8009460:	08009514 	.word	0x08009514
 8009464:	08009514 	.word	0x08009514
 8009468:	08009518 	.word	0x08009518

0800946c <memset>:
 800946c:	4603      	mov	r3, r0
 800946e:	4402      	add	r2, r0
 8009470:	4293      	cmp	r3, r2
 8009472:	d100      	bne.n	8009476 <memset+0xa>
 8009474:	4770      	bx	lr
 8009476:	f803 1b01 	strb.w	r1, [r3], #1
 800947a:	e7f9      	b.n	8009470 <memset+0x4>

0800947c <_init>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr

08009488 <_fini>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	bf00      	nop
 800948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948e:	bc08      	pop	{r3}
 8009490:	469e      	mov	lr, r3
 8009492:	4770      	bx	lr
